{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shawj\\\\Desktop\\\\ALL\\\\portfolio\\\\src\\\\components\\\\SnakeGame.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst canvasSize = {\n  width: 400,\n  height: 400\n};\nconst scale = 20;\nconst rows = canvasSize.height / scale;\nconst columns = canvasSize.width / scale;\nconst SnakeGame = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const ctxRef = useRef(null);\n  const snakeRef = useRef([{\n    x: 10,\n    y: 10\n  }, {\n    x: 9,\n    y: 10\n  }, {\n    x: 8,\n    y: 10\n  }]);\n  const dirRef = useRef({\n    x: 1,\n    y: 0\n  });\n  const foodRef = useRef(randomFood());\n  const intervalRef = useRef(null);\n  const [gameOver, setGameOver] = useState(false);\n  function randomFood() {\n    return {\n      x: Math.floor(Math.random() * columns),\n      y: Math.floor(Math.random() * rows)\n    };\n  }\n  const resetGame = () => {\n    snakeRef.current = [{\n      x: 10,\n      y: 10\n    }, {\n      x: 9,\n      y: 10\n    }, {\n      x: 8,\n      y: 10\n    }];\n    dirRef.current = {\n      x: 1,\n      y: 0\n    };\n    foodRef.current = randomFood();\n    setGameOver(false);\n  };\n  const getSpeed = () => {\n    const length = snakeRef.current.length;\n    return Math.max(60, 200 - (length - 3) * 10); // Min speed 60ms\n  };\n  const moveSnake = () => {\n    const snake = [...snakeRef.current];\n    const head = {\n      ...snake[0]\n    };\n    head.x += dirRef.current.x;\n    head.y += dirRef.current.y;\n    const hitWall = head.x < 0 || head.x >= columns || head.y < 0 || head.y >= rows;\n    const hitSelf = snake.some(segment => segment.x === head.x && segment.y === head.y);\n    if (hitWall || hitSelf) {\n      setGameOver(true);\n      clearInterval(intervalRef.current);\n      return;\n    }\n    snake.unshift(head);\n    if (head.x === foodRef.current.x && head.y === foodRef.current.y) {\n      foodRef.current = randomFood();\n    } else {\n      snake.pop();\n    }\n    snakeRef.current = snake;\n    drawGame(ctxRef.current);\n\n    // Update speed dynamically\n    clearInterval(intervalRef.current);\n    intervalRef.current = setInterval(moveSnake, getSpeed());\n  };\n  const drawGame = ctx => {\n    ctx.clearRect(0, 0, columns, rows);\n\n    // Food\n    ctx.fillStyle = \"#f43f5e\";\n    ctx.fillRect(foodRef.current.x, foodRef.current.y, 1, 1);\n\n    // Snake\n    ctx.fillStyle = \"#10b981\";\n    snakeRef.current.forEach(segment => {\n      ctx.fillRect(segment.x, segment.y, 1, 1);\n    });\n  };\n\n  // Initial setup\n  useEffect(() => {\n    const ctx = canvasRef.current.getContext(\"2d\");\n    ctx.setTransform(scale, 0, 0, scale, 0, 0);\n    ctxRef.current = ctx;\n    drawGame(ctx);\n    if (!gameOver) {\n      intervalRef.current = setInterval(moveSnake, getSpeed());\n    }\n    return () => clearInterval(intervalRef.current);\n  }, [gameOver]);\n\n  // Arrow + WASD control\n  useEffect(() => {\n    const handleKey = e => {\n      const key = e.key.toLowerCase();\n      const {\n        x,\n        y\n      } = dirRef.current;\n      switch (key) {\n        case \"arrowup\":\n        case \"w\":\n          if (y !== 1) dirRef.current = {\n            x: 0,\n            y: -1\n          };\n          break;\n        case \"arrowdown\":\n        case \"s\":\n          if (y !== -1) dirRef.current = {\n            x: 0,\n            y: 1\n          };\n          break;\n        case \"arrowleft\":\n        case \"a\":\n          if (x !== 1) dirRef.current = {\n            x: -1,\n            y: 0\n          };\n          break;\n        case \"arrowright\":\n        case \"d\":\n          if (x !== -1) dirRef.current = {\n            x: 1,\n            y: 0\n          };\n          break;\n        default:\n          break;\n      }\n    };\n    window.addEventListener(\"keydown\", handleKey);\n    return () => window.removeEventListener(\"keydown\", handleKey);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center gap-4\",\n    children: [gameOver && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500 font-bold text-lg\",\n      children: \"Game Over\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: canvasSize.width,\n      height: canvasSize.height,\n      style: {\n        imageRendering: \"pixelated\"\n      },\n      className: \"border border-slate-600 bg-black\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetGame,\n      className: \"bg-slate-700 text-white px-4 py-1 rounded hover:bg-slate-600 mt-4\",\n      children: \"Restart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_s(SnakeGame, \"59mVAs9LHoGBvbXU/2DJQx8AEXE=\");\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","canvasSize","width","height","scale","rows","columns","SnakeGame","_s","canvasRef","ctxRef","snakeRef","x","y","dirRef","foodRef","randomFood","intervalRef","gameOver","setGameOver","Math","floor","random","resetGame","current","getSpeed","length","max","moveSnake","snake","head","hitWall","hitSelf","some","segment","clearInterval","unshift","pop","drawGame","setInterval","ctx","clearRect","fillStyle","fillRect","forEach","getContext","setTransform","handleKey","e","key","toLowerCase","window","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","imageRendering","onClick","_c","$RefreshReg$"],"sources":["C:/Users/shawj/Desktop/ALL/portfolio/src/components/SnakeGame.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nconst canvasSize = { width: 400, height: 400 };\r\nconst scale = 20;\r\nconst rows = canvasSize.height / scale;\r\nconst columns = canvasSize.width / scale;\r\n\r\nconst SnakeGame = () => {\r\n  const canvasRef = useRef(null);\r\n  const ctxRef = useRef(null);\r\n  const snakeRef = useRef([\r\n    { x: 10, y: 10 },\r\n    { x: 9, y: 10 },\r\n    { x: 8, y: 10 },\r\n  ]);\r\n  const dirRef = useRef({ x: 1, y: 0 });\r\n  const foodRef = useRef(randomFood());\r\n  const intervalRef = useRef(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  function randomFood() {\r\n    return {\r\n      x: Math.floor(Math.random() * columns),\r\n      y: Math.floor(Math.random() * rows),\r\n    };\r\n  }\r\n\r\n  const resetGame = () => {\r\n    snakeRef.current = [\r\n      { x: 10, y: 10 },\r\n      { x: 9, y: 10 },\r\n      { x: 8, y: 10 },\r\n    ];\r\n    dirRef.current = { x: 1, y: 0 };\r\n    foodRef.current = randomFood();\r\n    setGameOver(false);\r\n  };\r\n\r\n  const getSpeed = () => {\r\n    const length = snakeRef.current.length;\r\n    return Math.max(60, 200 - (length - 3) * 10); // Min speed 60ms\r\n  };\r\n\r\n  const moveSnake = () => {\r\n    const snake = [...snakeRef.current];\r\n    const head = { ...snake[0] };\r\n    head.x += dirRef.current.x;\r\n    head.y += dirRef.current.y;\r\n\r\n    const hitWall = head.x < 0 || head.x >= columns || head.y < 0 || head.y >= rows;\r\n    const hitSelf = snake.some(segment => segment.x === head.x && segment.y === head.y);\r\n\r\n    if (hitWall || hitSelf) {\r\n      setGameOver(true);\r\n      clearInterval(intervalRef.current);\r\n      return;\r\n    }\r\n\r\n    snake.unshift(head);\r\n\r\n    if (head.x === foodRef.current.x && head.y === foodRef.current.y) {\r\n      foodRef.current = randomFood();\r\n    } else {\r\n      snake.pop();\r\n    }\r\n\r\n    snakeRef.current = snake;\r\n    drawGame(ctxRef.current);\r\n\r\n    // Update speed dynamically\r\n    clearInterval(intervalRef.current);\r\n    intervalRef.current = setInterval(moveSnake, getSpeed());\r\n  };\r\n\r\n  const drawGame = (ctx) => {\r\n    ctx.clearRect(0, 0, columns, rows);\r\n\r\n    // Food\r\n    ctx.fillStyle = \"#f43f5e\";\r\n    ctx.fillRect(foodRef.current.x, foodRef.current.y, 1, 1);\r\n\r\n    // Snake\r\n    ctx.fillStyle = \"#10b981\";\r\n    snakeRef.current.forEach(segment => {\r\n      ctx.fillRect(segment.x, segment.y, 1, 1);\r\n    });\r\n  };\r\n\r\n  // Initial setup\r\n  useEffect(() => {\r\n    const ctx = canvasRef.current.getContext(\"2d\");\r\n    ctx.setTransform(scale, 0, 0, scale, 0, 0);\r\n    ctxRef.current = ctx;\r\n\r\n    drawGame(ctx);\r\n\r\n    if (!gameOver) {\r\n      intervalRef.current = setInterval(moveSnake, getSpeed());\r\n    }\r\n\r\n    return () => clearInterval(intervalRef.current);\r\n  }, [gameOver]);\r\n\r\n  // Arrow + WASD control\r\n  useEffect(() => {\r\n    const handleKey = (e) => {\r\n      const key = e.key.toLowerCase();\r\n      const { x, y } = dirRef.current;\r\n\r\n      switch (key) {\r\n        case \"arrowup\":\r\n        case \"w\":\r\n          if (y !== 1) dirRef.current = { x: 0, y: -1 };\r\n          break;\r\n        case \"arrowdown\":\r\n        case \"s\":\r\n          if (y !== -1) dirRef.current = { x: 0, y: 1 };\r\n          break;\r\n        case \"arrowleft\":\r\n        case \"a\":\r\n          if (x !== 1) dirRef.current = { x: -1, y: 0 };\r\n          break;\r\n        case \"arrowright\":\r\n        case \"d\":\r\n          if (x !== -1) dirRef.current = { x: 1, y: 0 };\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"keydown\", handleKey);\r\n    return () => window.removeEventListener(\"keydown\", handleKey);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center gap-4\">\r\n      {gameOver && (\r\n        <p className=\"text-red-500 font-bold text-lg\">Game Over</p>\r\n      )}\r\n\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={canvasSize.width}\r\n        height={canvasSize.height}\r\n        style={{ imageRendering: \"pixelated\" }}\r\n        className=\"border border-slate-600 bg-black\"\r\n      />\r\n\r\n      {gameOver && (\r\n        <button\r\n          onClick={resetGame}\r\n          className=\"bg-slate-700 text-white px-4 py-1 rounded hover:bg-slate-600 mt-4\"\r\n        >\r\n          Restart\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SnakeGame;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}