{"ast":null,"code":"import _objectSpread from\"C:/portfolio/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useEffect,useRef,useState}from\"react\";import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const canvasSize={width:400,height:400};const scale=20;const rows=canvasSize.height/scale;const columns=canvasSize.width/scale;const SnakeGame=_ref=>{let{isDark}=_ref;const canvasRef=useRef(null);const ctxRef=useRef(null);const snakeRef=useRef([{x:10,y:10},{x:9,y:10},{x:8,y:10}]);const dirRef=useRef({x:1,y:0});const foodRef=useRef(randomFood());const intervalRef=useRef(null);const[gameOver,setGameOver]=useState(false);const[score,setScore]=useState(0);const[highScore,setHighScore]=useState(0);const[isPaused,setIsPaused]=useState(false);function randomFood(){const snake=snakeRef.current;let newFood;do{newFood={x:Math.floor(Math.random()*columns),y:Math.floor(Math.random()*rows)};}while(snake.some(segment=>segment.x===newFood.x&&segment.y===newFood.y));return newFood;}const resetGame=()=>{snakeRef.current=[{x:10,y:10},{x:9,y:10},{x:8,y:10}];dirRef.current={x:1,y:0};foodRef.current=randomFood();setScore(0);setGameOver(false);setIsPaused(false);};const getSpeed=()=>{const length=snakeRef.current.length;if(length<8)return 200;if(length<12)return 180;if(length<16)return 160;if(length<20)return 140;if(length<25)return 120;return 100;};const moveSnake=()=>{if(isPaused||gameOver)return;const snake=[...snakeRef.current];const head=_objectSpread({},snake[0]);head.x+=dirRef.current.x;head.y+=dirRef.current.y;const hitWall=head.x<0||head.x>=columns||head.y<0||head.y>=rows;const hitSelf=snake.some(segment=>segment.x===head.x&&segment.y===head.y);if(hitWall||hitSelf){setGameOver(true);clearInterval(intervalRef.current);return;}snake.unshift(head);if(head.x===foodRef.current.x&&head.y===foodRef.current.y){foodRef.current=randomFood();const newScore=snake.length-3;setScore(newScore);if(newScore>highScore){setHighScore(newScore);localStorage.setItem(\"snakeHighScore\",newScore.toString());}}else{snake.pop();}snakeRef.current=snake;drawGame(ctxRef.current);clearInterval(intervalRef.current);intervalRef.current=setInterval(moveSnake,getSpeed());};const drawGame=ctx=>{ctx.clearRect(0,0,columns,rows);ctx.fillStyle=\"#f43f5e\";// food\nctx.fillRect(foodRef.current.x,foodRef.current.y,1,1);ctx.fillStyle=\"#10b981\";// snake\nsnakeRef.current.forEach(segment=>{ctx.fillRect(segment.x,segment.y,1,1);});};useEffect(()=>{const ctx=canvasRef.current.getContext(\"2d\");ctx.setTransform(scale,0,0,scale,0,0);ctxRef.current=ctx;drawGame(ctx);// Load high score from localStorage\nconst stored=localStorage.getItem(\"snakeHighScore\");if(stored){setHighScore(parseInt(stored));}// Manage game loop interval\nif(!gameOver&&!isPaused){intervalRef.current=setInterval(moveSnake,getSpeed());}// Clear interval on cleanup\nreturn()=>clearInterval(intervalRef.current);},[gameOver,isPaused]);useEffect(()=>{const handleKey=e=>{const key=e.key.toLowerCase();const{x,y}=dirRef.current;if(key===\"p\"){setIsPaused(prev=>!prev);return;}switch(key){case\"arrowup\":case\"w\":if(y!==1)dirRef.current={x:0,y:-1};break;case\"arrowdown\":case\"s\":if(y!==-1)dirRef.current={x:0,y:1};break;case\"arrowleft\":case\"a\":if(x!==1)dirRef.current={x:-1,y:0};break;case\"arrowright\":case\"d\":if(x!==-1)dirRef.current={x:1,y:0};break;default:break;}};window.addEventListener(\"keydown\",handleKey);return()=>window.removeEventListener(\"keydown\",handleKey);},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col items-center w-full px-4 pb-10 gap-y-6\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"w-full max-w-md rounded-lg border p-4 shadow-lg transition-colors duration-300 \".concat(isDark?\"bg-slate-800 text-white border-slate-700\":\"bg-white text-black border-gray-300\"),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between text-sm mb-2\",children:[/*#__PURE__*/_jsxs(\"span\",{children:[\"Score: \",score]}),/*#__PURE__*/_jsxs(\"span\",{children:[\"High Score: \",highScore]})]}),isPaused&&/*#__PURE__*/_jsx(\"p\",{className:\"text-yellow-500 text-center text-sm mb-2\",children:\"\\u23F8\\uFE0F Paused \\u2014 press 'P' or click resume\"}),gameOver&&/*#__PURE__*/_jsxs(\"p\",{className:\"text-red-500 text-center font-bold text-sm mb-2\",children:[\"\\uD83D\\uDC80 Game Over \\u2014 Final Score: \",score]}),/*#__PURE__*/_jsx(\"div\",{className:\"flex justify-center\",children:/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,width:canvasSize.width,height:canvasSize.height,style:{width:canvasSize.width,height:canvasSize.height,imageRendering:\"pixelated\"},className:isDark?\"border border-slate-700 bg-black\":\"border border-gray-400 bg-black\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"flex justify-center gap-3 mt-4\",children:gameOver?/*#__PURE__*/_jsx(\"button\",{onClick:resetGame,className:\"bg-slate-700 text-white px-4 py-1 rounded hover:bg-slate-600\",children:\"Restart\"}):/*#__PURE__*/_jsx(\"button\",{onClick:()=>setIsPaused(prev=>!prev),className:\"bg-slate-700 text-white px-4 py-1 rounded hover:bg-slate-600\",children:isPaused?\"Resume\":\"Pause\"})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"w-full max-w-md rounded-lg border p-4 text-sm transition-colors duration-300 \".concat(isDark?\"bg-slate-800 text-white border-slate-700\":\"bg-white text-black border-gray-300\"),children:[/*#__PURE__*/_jsx(\"p\",{className:\"font-semibold text-base mb-1 text-green-600 dark:text-green-400\",children:\"About Snake\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Navigate the snake to eat food and grow longer. Avoid running into the walls or yourself.\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"mt-2\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"font-semibold\",children:\"Controls:\"}),\" Arrow keys or WASD to move, \",/*#__PURE__*/_jsx(\"kbd\",{children:\"P\"}),\" to pause/resume.\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{className:\"font-semibold\",children:\"Objective:\"}),\" Grow the longest snake you can!\"]})]})]});};export default SnakeGame;","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxs","_jsxs","jsx","_jsx","canvasSize","width","height","scale","rows","columns","SnakeGame","_ref","isDark","canvasRef","ctxRef","snakeRef","x","y","dirRef","foodRef","randomFood","intervalRef","gameOver","setGameOver","score","setScore","highScore","setHighScore","isPaused","setIsPaused","snake","current","newFood","Math","floor","random","some","segment","resetGame","getSpeed","length","moveSnake","head","_objectSpread","hitWall","hitSelf","clearInterval","unshift","newScore","localStorage","setItem","toString","pop","drawGame","setInterval","ctx","clearRect","fillStyle","fillRect","forEach","getContext","setTransform","stored","getItem","parseInt","handleKey","e","key","toLowerCase","prev","window","addEventListener","removeEventListener","className","children","concat","ref","style","imageRendering","onClick"],"sources":["C:/portfolio/src/components/SnakeGame.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nconst canvasSize = { width: 400, height: 400 };\r\nconst scale = 20;\r\nconst rows = canvasSize.height / scale;\r\nconst columns = canvasSize.width / scale;\r\n\r\nconst SnakeGame = ({ isDark }) => {\r\n  const canvasRef = useRef(null);\r\n  const ctxRef = useRef(null);\r\n  const snakeRef = useRef([\r\n    { x: 10, y: 10 },\r\n    { x: 9, y: 10 },\r\n    { x: 8, y: 10 },\r\n  ]);\r\n  const dirRef = useRef({ x: 1, y: 0 });\r\n  const foodRef = useRef(randomFood());\r\n  const intervalRef = useRef(null);\r\n\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [highScore, setHighScore] = useState(0);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n\r\n  function randomFood() {\r\n  const snake = snakeRef.current;\r\n  let newFood;\r\n\r\n  do {\r\n    newFood = {\r\n      x: Math.floor(Math.random() * columns),\r\n      y: Math.floor(Math.random() * rows),\r\n    };\r\n  } while (snake.some(segment => segment.x === newFood.x && segment.y === newFood.y));\r\n\r\n  return newFood;\r\n}\r\n\r\n  const resetGame = () => {\r\n    snakeRef.current = [\r\n      { x: 10, y: 10 },\r\n      { x: 9, y: 10 },\r\n      { x: 8, y: 10 },\r\n    ];\r\n    dirRef.current = { x: 1, y: 0 };\r\n    foodRef.current = randomFood();\r\n    setScore(0);\r\n    setGameOver(false);\r\n    setIsPaused(false);\r\n  };\r\n\r\n  const getSpeed = () => {\r\n    const length = snakeRef.current.length;\r\n    if (length < 8) return 200;\r\n    if (length < 12) return 180;\r\n    if (length < 16) return 160;\r\n    if (length < 20) return 140;\r\n    if (length < 25) return 120;\r\n    return 100;\r\n  };\r\n\r\n  const moveSnake = () => {\r\n    if (isPaused || gameOver) return;\r\n\r\n    const snake = [...snakeRef.current];\r\n    const head = { ...snake[0] };\r\n    head.x += dirRef.current.x;\r\n    head.y += dirRef.current.y;\r\n\r\n    const hitWall = head.x < 0 || head.x >= columns || head.y < 0 || head.y >= rows;\r\n    const hitSelf = snake.some(segment => segment.x === head.x && segment.y === head.y);\r\n\r\n    if (hitWall || hitSelf) {\r\n      setGameOver(true);\r\n      clearInterval(intervalRef.current);\r\n      return;\r\n    }\r\n\r\n    snake.unshift(head);\r\n\r\n    if (head.x === foodRef.current.x && head.y === foodRef.current.y) {\r\n      foodRef.current = randomFood();\r\n      const newScore = snake.length - 3;\r\n      setScore(newScore);\r\n      if (newScore > highScore) {\r\n        setHighScore(newScore);\r\n        localStorage.setItem(\"snakeHighScore\", newScore.toString());\r\n      }\r\n    } else {\r\n      snake.pop();\r\n    }\r\n\r\n    snakeRef.current = snake;\r\n    drawGame(ctxRef.current);\r\n\r\n    clearInterval(intervalRef.current);\r\n    intervalRef.current = setInterval(moveSnake, getSpeed());\r\n  };\r\n\r\n  const drawGame = (ctx) => {\r\n    ctx.clearRect(0, 0, columns, rows);\r\n    ctx.fillStyle = \"#f43f5e\"; // food\r\n    ctx.fillRect(foodRef.current.x, foodRef.current.y, 1, 1);\r\n    ctx.fillStyle = \"#10b981\"; // snake\r\n    snakeRef.current.forEach(segment => {\r\n      ctx.fillRect(segment.x, segment.y, 1, 1);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n  const ctx = canvasRef.current.getContext(\"2d\");\r\n  ctx.setTransform(scale, 0, 0, scale, 0, 0);\r\n  ctxRef.current = ctx;\r\n  drawGame(ctx);\r\n\r\n  // Load high score from localStorage\r\n  const stored = localStorage.getItem(\"snakeHighScore\");\r\n  if (stored) {\r\n    setHighScore(parseInt(stored));\r\n  }\r\n\r\n  // Manage game loop interval\r\n  if (!gameOver && !isPaused) {\r\n    intervalRef.current = setInterval(moveSnake, getSpeed());\r\n  }\r\n\r\n  // Clear interval on cleanup\r\n  return () => clearInterval(intervalRef.current);\r\n}, [gameOver, isPaused]);\r\n\r\n\r\n  useEffect(() => {\r\n    const handleKey = (e) => {\r\n      const key = e.key.toLowerCase();\r\n      const { x, y } = dirRef.current;\r\n\r\n      if (key === \"p\") {\r\n        setIsPaused(prev => !prev);\r\n        return;\r\n      }\r\n\r\n      switch (key) {\r\n        case \"arrowup\":\r\n        case \"w\":\r\n          if (y !== 1) dirRef.current = { x: 0, y: -1 };\r\n          break;\r\n        case \"arrowdown\":\r\n        case \"s\":\r\n          if (y !== -1) dirRef.current = { x: 0, y: 1 };\r\n          break;\r\n        case \"arrowleft\":\r\n        case \"a\":\r\n          if (x !== 1) dirRef.current = { x: -1, y: 0 };\r\n          break;\r\n        case \"arrowright\":\r\n        case \"d\":\r\n          if (x !== -1) dirRef.current = { x: 1, y: 0 };\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"keydown\", handleKey);\r\n    return () => window.removeEventListener(\"keydown\", handleKey);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center w-full px-4 pb-10 gap-y-6\">\r\n\r\n      {/* GAME BOX */}\r\n      <div className={`w-full max-w-md rounded-lg border p-4 shadow-lg transition-colors duration-300 ${\r\n        isDark ? \"bg-slate-800 text-white border-slate-700\" : \"bg-white text-black border-gray-300\"\r\n    }`}>\r\n\r\n\r\n        {/* Score & High Score */}\r\n        <div className=\"flex justify-between text-sm mb-2\">\r\n          <span>Score: {score}</span>\r\n          <span>High Score: {highScore}</span>\r\n        </div>\r\n\r\n        {/* Pause / Game Over */}\r\n        {isPaused && (\r\n          <p className=\"text-yellow-500 text-center text-sm mb-2\">⏸️ Paused — press 'P' or click resume</p>\r\n        )}\r\n        {gameOver && (\r\n          <p className=\"text-red-500 text-center font-bold text-sm mb-2\">💀 Game Over — Final Score: {score}</p>\r\n        )}\r\n\r\n        {/* Canvas */}\r\n        <div className=\"flex justify-center\">\r\n          <canvas\r\n            ref={canvasRef}\r\n            width={canvasSize.width}\r\n            height={canvasSize.height}\r\n            style={{ width: canvasSize.width, height: canvasSize.height, imageRendering: \"pixelated\" }}\r\n            className={isDark ? \"border border-slate-700 bg-black\" : \"border border-gray-400 bg-black\"}\r\n          />\r\n        </div>\r\n\r\n        {/* Buttons */}\r\n<div className=\"flex justify-center gap-3 mt-4\">\r\n  {gameOver ? (\r\n    <button\r\n      onClick={resetGame}\r\n      className=\"bg-slate-700 text-white px-4 py-1 rounded hover:bg-slate-600\"\r\n    >\r\n      Restart\r\n    </button>\r\n  ) : (\r\n    <button\r\n      onClick={() => setIsPaused(prev => !prev)}\r\n      className=\"bg-slate-700 text-white px-4 py-1 rounded hover:bg-slate-600\"\r\n    >\r\n      {isPaused ? \"Resume\" : \"Pause\"}\r\n    </button>\r\n  )}\r\n</div>\r\n\r\n      </div>\r\n\r\n      {/* ABOUT BOX */}\r\n      <div className={`w-full max-w-md rounded-lg border p-4 text-sm transition-colors duration-300 ${\r\n         isDark ? \"bg-slate-800 text-white border-slate-700\" : \"bg-white text-black border-gray-300\"\r\n      }`}>\r\n        <p className=\"font-semibold text-base mb-1 text-green-600 dark:text-green-400\">About Snake</p>\r\n        <p>\r\n          Navigate the snake to eat food and grow longer. Avoid running into the walls or yourself.\r\n        </p>\r\n        <p className=\"mt-2\">\r\n          <span className=\"font-semibold\">Controls:</span> Arrow keys or WASD to move, <kbd>P</kbd> to pause/resume.\r\n        </p>\r\n        <p>\r\n          <span className=\"font-semibold\">Objective:</span> Grow the longest snake you can!\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SnakeGame;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}