{"version":3,"file":"static/js/258.5bdc48e2.chunk.js","mappings":"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","sources":["components/TetrisGame.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\n\r\nconst DEFAULT_MODE = { COLS: 10, ROWS: 20, DROP_INTERVAL: 500 };\r\nconst EASY_MODE = { COLS: 14, ROWS: 20, DROP_INTERVAL: 800 };\r\nconst HARD_MODE = DEFAULT_MODE;\r\nconst BLOCK_SIZE = 30;\r\n// canvasWidth and canvasHeight will be defined inside the component\r\n\r\nconst TETROMINOES = {\r\n  I: { shape: [[0,0,0,0],[1,1,1,1],[0,0,0,0],[0,0,0,0]], color: \"#06b6d4\" },\r\n  J: { shape: [[1,0,0],[1,1,1],[0,0,0]], color: \"#3b82f6\" },\r\n  L: { shape: [[0,0,1],[1,1,1],[0,0,0]], color: \"#f97316\" },\r\n  O: { shape: [[1,1],[1,1]], color: \"#facc15\" },\r\n  S: { shape: [[0,1,1],[1,1,0],[0,0,0]], color: \"#22c55e\" },\r\n  T: { shape: [[0,1,0],[1,1,1],[0,0,0]], color: \"#a855f7\" },\r\n  Z: { shape: [[1,1,0],[0,1,1],[0,0,0]], color: \"#ef4444\" },\r\n};\r\n\r\nconst randomTetromino = () => {\r\n  const keys = Object.keys(TETROMINOES);\r\n  const rand = keys[Math.floor(Math.random() * keys.length)];\r\n  return { ...TETROMINOES[rand], x: 3, y: 0 };\r\n};\r\n\r\nconst rotateMatrix = (matrix) => matrix[0].map((_, i) => matrix.map(row => row[i]).reverse());\r\n\r\nconst isValidMove = (shape, grid, offsetX, offsetY, ROWS, COLS) => {\r\n  for (let y = 0; y < shape.length; y++) {\r\n    for (let x = 0; x < shape[y].length; x++) {\r\n      if (shape[y][x]) {\r\n        const newY = y + offsetY;\r\n        const newX = x + offsetX;\r\n        if (\r\n          newY >= ROWS ||\r\n          newX < 0 ||\r\n          newX >= COLS ||\r\n          (grid[newY] && grid[newY][newX])\r\n        ) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\nconst mergeTetromino = (grid, tetromino, ROWS) => {\r\n  const newGrid = grid.map(row => [...row]);\r\n  const { shape, x, y } = tetromino;\r\n  shape.forEach((row, dy) => {\r\n    row.forEach((val, dx) => {\r\n      if (val && y + dy < ROWS && x + dx >= 0) {\r\n        newGrid[y + dy][x + dx] = tetromino.color;\r\n      }\r\n    });\r\n  });\r\n  return newGrid;\r\n};\r\n\r\nconst clearLines = (grid, ROWS, COLS) => {\r\n  const newGrid = grid.filter(row => row.some(cell => cell === 0));\r\n  const linesCleared = ROWS - newGrid.length;\r\n  while (newGrid.length < ROWS) newGrid.unshift(Array(COLS).fill(0));\r\n  return { grid: newGrid, linesCleared };\r\n};\r\n\r\nconst TetrisGame = ({ isDark }) => {\r\n  const [mode, setMode] = useState(HARD_MODE);\r\n  const COLS = mode.COLS;\r\n  const ROWS = mode.ROWS;\r\n  const canvasWidth = COLS * BLOCK_SIZE;\r\n  const canvasHeight = ROWS * BLOCK_SIZE;\r\n  const canvasRef = useRef(null);\r\n  const [grid, setGrid] = useState(Array.from({ length: ROWS }, () => Array(COLS).fill(0)));\r\n  const gridRef = useRef(grid);\r\n  const [activeBlock, setActiveBlock] = useState(randomTetromino());\r\n  const activeBlockRef = useRef(activeBlock);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [highScore, setHighScore] = useState(0);\r\n\r\n  const dropCounterRef = useRef(0);\r\n  const lastTimeRef = useRef(0);\r\n  const requestRef = useRef();\r\n\r\n  useEffect(() => {\r\n    activeBlockRef.current = activeBlock;\r\n  }, [activeBlock]);\r\n\r\n  useEffect(() => {\r\n    gridRef.current = grid;\r\n  }, [grid]);\r\n\r\n  const draw = (ctx) => {\r\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n    for (let y = 0; y < ROWS; y++) {\r\n      for (let x = 0; x < COLS; x++) {\r\n        if (gridRef.current[y][x]) {\r\n        ctx.fillStyle = gridRef.current[y][x];\r\n        ctx.fillRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);\r\n          ctx.strokeStyle = \"#1e3a8a\";\r\n          ctx.strokeRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);\r\n        }\r\n      }\r\n    }\r\n    const { shape, x, y, color } = activeBlockRef.current;\r\n    shape.forEach((row, dy) => {\r\n      row.forEach((val, dx) => {\r\n        if (val) {\r\n          ctx.fillStyle = color;\r\n          ctx.fillRect((x + dx) * BLOCK_SIZE, (y + dy) * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);\r\n          ctx.strokeStyle = \"#1e3a8a\";\r\n          ctx.strokeRect((x + dx) * BLOCK_SIZE, (y + dy) * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  const gameLoop = (time) => {\r\n    if (!canvasRef.current) return;\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    const deltaTime = time - lastTimeRef.current;\r\n    lastTimeRef.current = time;\r\n    dropCounterRef.current += deltaTime;\r\n\r\n    const dropInterval = mode.DROP_INTERVAL;\r\n\r\n    if (isRunning && !isPaused && dropCounterRef.current > dropInterval) {\r\n      dropCounterRef.current = 0;\r\n      const moved = { ...activeBlockRef.current, y: activeBlockRef.current.y + 1 };\r\n      if (isValidMove(moved.shape, gridRef.current, moved.x, moved.y, ROWS, COLS)) {\r\n        setActiveBlock(moved);\r\n      } else {\r\n        const merged = mergeTetromino(gridRef.current, activeBlockRef.current, ROWS);\r\n        const { grid: cleared, linesCleared } = clearLines(merged, ROWS, COLS);\r\n        if (linesCleared > 0) {\r\n          const points = [0, 100, 300, 500, 800][linesCleared] || 0;\r\n          setScore(prev => prev + points);\r\n        }\r\n        setGrid(cleared);\r\n        const nextBlock = randomTetromino();\r\n        // Check for game over: if the next block collides immediately\r\n        if (!isValidMove(nextBlock.shape, gridRef.current, nextBlock.x, nextBlock.y, ROWS, COLS)) {\r\n          setIsRunning(false);\r\n          setIsGameOver(true);\r\n          return;\r\n        }\r\n        setActiveBlock(nextBlock);\r\n        activeBlockRef.current = nextBlock;\r\n      }\r\n    }\r\n\r\n    draw(ctx);\r\n    requestRef.current = requestAnimationFrame(gameLoop);\r\n  };\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      handleStart();\r\n    }\r\n  }, [mode]);\r\n\r\n  useEffect(() => {\r\n    if (isRunning && !isPaused) {\r\n      lastTimeRef.current = performance.now();\r\n      requestRef.current = requestAnimationFrame(gameLoop);\r\n    }\r\n    return () => cancelAnimationFrame(requestRef.current);\r\n  }, [isRunning, isPaused]);\r\n\r\n  useEffect(() => {\r\n    if (isRunning && !isPaused) {\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n      draw(ctx);\r\n    }\r\n  }, [grid, activeBlock]);\r\n\r\n  useEffect(() => {\r\n    const handleKey = (e) => {\r\n      if (!isRunning || isPaused) return;\r\n      let moved = { ...activeBlockRef.current };\r\n      if (e.key === \"ArrowLeft\" || e.key.toLowerCase() === \"a\") moved.x--;\r\n      else if (e.key === \"ArrowRight\" || e.key.toLowerCase() === \"d\") moved.x++;\r\n      else if (e.key === \"ArrowDown\" || e.key.toLowerCase() === \"s\") moved.y++;\r\n      else if (e.key === \"ArrowUp\" || e.key.toLowerCase() === \"w\") {\r\n        const rotated = rotateMatrix(activeBlockRef.current.shape);\r\n        if (isValidMove(rotated, gridRef.current, activeBlockRef.current.x, activeBlockRef.current.y, ROWS, COLS)) {\r\n          setActiveBlock({ ...activeBlockRef.current, shape: rotated });\r\n          return;\r\n        }\r\n      }\r\n      if (isValidMove(moved.shape, gridRef.current, moved.x, moved.y, ROWS, COLS)) setActiveBlock(moved);\r\n    };\r\n\r\n    window.addEventListener(\"keydown\", handleKey);\r\n    return () => window.removeEventListener(\"keydown\", handleKey);\r\n  }, [isRunning, isPaused, grid]);\r\n\r\n  const handleStart = () => {\r\n    setGrid(Array.from({ length: ROWS }, () => Array(COLS).fill(0)));\r\n    setScore(0);\r\n    setHighScore(prev => Math.max(prev, score));\r\n    setIsGameOver(false);\r\n    const newBlock = randomTetromino();\r\n    setActiveBlock(newBlock);\r\n    activeBlockRef.current = newBlock;\r\n    setIsRunning(true);\r\n    setIsPaused(false);\r\n\r\n    // Delay drawing slightly until canvas is mounted\r\n    setTimeout(() => {\r\n      if (canvasRef.current) {\r\n        const ctx = canvasRef.current.getContext(\"2d\");\r\n        draw(ctx);\r\n      }\r\n    }, 0);\r\n  };\r\n\r\n  const handlePause = () => {\r\n    if (isRunning) setIsPaused((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center w-full px-4 pb-10 gap-y-4\">\r\n      <div className=\"flex gap-4 flex-wrap justify-center\">\r\n        <button\r\n          onClick={() => {\r\n            setIsRunning(false);\r\n            setIsPaused(false);\r\n            setIsGameOver(false);\r\n            setGrid(Array.from({ length: ROWS }, () => Array(COLS).fill(0)));\r\n            setScore(0);\r\n            cancelAnimationFrame(requestRef.current);\r\n          }}\r\n          disabled={!isRunning}\r\n          className=\"px-2 py-1 rounded-md border text-white bg-gray-700\"\r\n        >\r\n          Exit\r\n        </button>\r\n        <button\r\n          onClick={() => setMode(EASY_MODE)}\r\n          disabled={isRunning}\r\n          className=\"px-2 py-1 rounded-md border text-white bg-green-500\"\r\n        >\r\n          Easy\r\n        </button>\r\n        <button\r\n          onClick={() => setMode(HARD_MODE)}\r\n          disabled={isRunning}\r\n          className=\"px-2 py-1 rounded-md border text-white bg-red-500\"\r\n        >\r\n          Hard\r\n        </button>\r\n        <button\r\n          onClick={handleStart}\r\n          className={`px-2 py-1 rounded-md border text-white ${isRunning ? \"bg-slate-600\" : \"bg-green-600\"}`}\r\n        >\r\n          Start\r\n        </button>\r\n        <button\r\n          onClick={handlePause}\r\n          disabled={!isRunning}\r\n          className={`px-2 py-1 rounded-md border text-white ${isPaused ? \"bg-yellow-600\" : isDark ? \"bg-blue-600\" : \"bg-slate-600\"}`}\r\n        >\r\n          {isPaused ? \"Resume\" : \"Pause\"}\r\n        </button>\r\n      </div>\r\n\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={canvasWidth}\r\n        height={canvasHeight}\r\n        className=\"border border-slate-700 bg-black\"\r\n        style={{ imageRendering: \"pixelated\" }}\r\n      />\r\n\r\n      <div className={`${isDark ? \"text-white\" : \"text-black\"} font-semibold text-lg`}>\r\n        Score: {score}\r\n      </div>\r\n      <div className={`${isDark ? \"text-white\" : \"text-black\"} font-medium`}>\r\n        High Score: {highScore}\r\n      </div>\r\n\r\n\r\n      {isGameOver && (\r\n        <div className=\"mt-4 p-4 text-center text-red-500 font-bold bg-white bg-opacity-10 rounded\">\r\n          Game Over\r\n        </div>\r\n      )}\r\n\r\n      {/* Info Box */}\r\n<div\r\n  className={`${isDark ? \"bg-slate-800 text-slate-200\" : \"bg-slate-100 text-slate-800\"} max-w-md mt-4 p-4 rounded-md text-sm shadow transition-colors`}\r\n>\r\n  <p className={`${isDark ? \"text-emerald-400\" : \"text-emerald-600\"} font-semibold`}>\r\n    About Tetris\r\n  </p>\r\n  <p>\r\n    Tetris is a puzzle game where blocks (tetrominoes) fall from the top. Your goal is to move and rotate them to create full rows, which clear and score points!\r\n  </p>\r\n  <p>\r\n    <span className={`${isDark ? \"text-white\" : \"text-black\"} font-semibold`}>Controls:</span>{\" \"}\r\n    Use <span className=\"font-mono\">W</span>/<span className=\"font-mono\">A</span>/<span className=\"font-mono\">S</span>/<span className=\"font-mono\">D</span> or arrow keys to move. Down or S to drop faster. W or up to rotate. A and D or left/right arrows to move left/right.\r\n    </p>\r\n  <p>\r\n    <span className={`${isDark ? \"text-white\" : \"text-black\"} font-semibold`}>Goal:</span>{\" \"}\r\n    Clear as many lines as possible!\r\n  </p>\r\n  <p>\r\n    <span className={`${isDark ? \"text-white\" : \"text-black\"} font-semibold`}>Modes:</span>{\" \"}\r\n    Easy gives you more time and space. Hard is faster and narrower. Choose your challenge!\r\n  </p>\r\n</div>\r\n\r\n    </div>\r\n\r\n    \r\n  );\r\n\r\n  \r\n};\r\n\r\nexport default TetrisGame;\r\n"],"names":["EASY_MODE","COLS","ROWS","DROP_INTERVAL","HARD_MODE","BLOCK_SIZE","TETROMINOES","I","shape","color","J","L","O","S","T","Z","randomTetromino","keys","Object","rand","Math","floor","random","length","_objectSpread","x","y","isValidMove","grid","offsetX","offsetY","newY","newX","_ref","isDark","mode","setMode","useState","canvasWidth","canvasHeight","canvasRef","useRef","setGrid","Array","from","fill","gridRef","activeBlock","setActiveBlock","activeBlockRef","isRunning","setIsRunning","isPaused","setIsPaused","isGameOver","setIsGameOver","score","setScore","highScore","setHighScore","dropCounterRef","lastTimeRef","requestRef","useEffect","current","draw","ctx","clearRect","fillStyle","fillRect","strokeStyle","strokeRect","forEach","row","dy","val","dx","gameLoop","time","getContext","deltaTime","dropInterval","moved","merged","mergeTetromino","tetromino","newGrid","map","cleared","linesCleared","clearLines","filter","some","cell","unshift","points","prev","nextBlock","requestAnimationFrame","handleStart","performance","now","cancelAnimationFrame","handleKey","e","key","toLowerCase","rotated","matrix","_","i","reverse","window","addEventListener","removeEventListener","max","newBlock","setTimeout","_jsxs","className","children","_jsx","onClick","disabled","concat","handlePause","ref","width","height","style","imageRendering"],"sourceRoot":""}