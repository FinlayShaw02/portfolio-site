{"version":3,"file":"static/js/531.d4876384.chunk.js","mappings":"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","sources":["components/SnakeGame.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nconst canvasSize = { width: 400, height: 400 };\r\nconst scale = 20;\r\nconst rows = canvasSize.height / scale;\r\nconst columns = canvasSize.width / scale;\r\n\r\nconst SnakeGame = ({ isDark }) => {\r\n  const canvasRef = useRef(null);\r\n  const ctxRef = useRef(null);\r\n  const snakeRef = useRef([\r\n    { x: 10, y: 10 },\r\n    { x: 9, y: 10 },\r\n    { x: 8, y: 10 },\r\n  ]);\r\n  const dirRef = useRef({ x: 1, y: 0 });\r\n  const foodRef = useRef(randomFood());\r\n  const intervalRef = useRef(null);\r\n\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [highScore, setHighScore] = useState(0);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n\r\n  function randomFood() {\r\n  const snake = snakeRef.current;\r\n  let newFood;\r\n\r\n  do {\r\n    newFood = {\r\n      x: Math.floor(Math.random() * columns),\r\n      y: Math.floor(Math.random() * rows),\r\n    };\r\n  } while (snake.some(segment => segment.x === newFood.x && segment.y === newFood.y));\r\n\r\n  return newFood;\r\n}\r\n\r\n  const resetGame = () => {\r\n    snakeRef.current = [\r\n      { x: 10, y: 10 },\r\n      { x: 9, y: 10 },\r\n      { x: 8, y: 10 },\r\n    ];\r\n    dirRef.current = { x: 1, y: 0 };\r\n    foodRef.current = randomFood();\r\n    setScore(0);\r\n    setGameOver(false);\r\n    setIsPaused(false);\r\n  };\r\n\r\n  const getSpeed = () => {\r\n    const length = snakeRef.current.length;\r\n    if (length < 8) return 200;\r\n    if (length < 12) return 180;\r\n    if (length < 16) return 160;\r\n    if (length < 20) return 140;\r\n    if (length < 25) return 120;\r\n    return 100;\r\n  };\r\n\r\n  const moveSnake = () => {\r\n    if (isPaused || gameOver) return;\r\n\r\n    const snake = [...snakeRef.current];\r\n    const head = { ...snake[0] };\r\n    head.x += dirRef.current.x;\r\n    head.y += dirRef.current.y;\r\n\r\n    const hitWall = head.x < 0 || head.x >= columns || head.y < 0 || head.y >= rows;\r\n    const hitSelf = snake.some(segment => segment.x === head.x && segment.y === head.y);\r\n\r\n    if (hitWall || hitSelf) {\r\n      setGameOver(true);\r\n      clearInterval(intervalRef.current);\r\n      return;\r\n    }\r\n\r\n    snake.unshift(head);\r\n\r\n    if (head.x === foodRef.current.x && head.y === foodRef.current.y) {\r\n      foodRef.current = randomFood();\r\n      const newScore = snake.length - 3;\r\n      setScore(newScore);\r\n      if (newScore > highScore) {\r\n        setHighScore(newScore);\r\n        localStorage.setItem(\"snakeHighScore\", newScore.toString());\r\n      }\r\n    } else {\r\n      snake.pop();\r\n    }\r\n\r\n    snakeRef.current = snake;\r\n    drawGame(ctxRef.current);\r\n\r\n    clearInterval(intervalRef.current);\r\n    intervalRef.current = setInterval(moveSnake, getSpeed());\r\n  };\r\n\r\n  const drawGame = (ctx) => {\r\n    ctx.clearRect(0, 0, columns, rows);\r\n    ctx.fillStyle = \"#f43f5e\"; // food\r\n    ctx.fillRect(foodRef.current.x, foodRef.current.y, 1, 1);\r\n    ctx.fillStyle = \"#10b981\"; // snake\r\n    snakeRef.current.forEach(segment => {\r\n      ctx.fillRect(segment.x, segment.y, 1, 1);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n  const ctx = canvasRef.current.getContext(\"2d\");\r\n  ctx.setTransform(scale, 0, 0, scale, 0, 0);\r\n  ctxRef.current = ctx;\r\n  drawGame(ctx);\r\n\r\n  // Load high score from localStorage\r\n  const stored = localStorage.getItem(\"snakeHighScore\");\r\n  if (stored) {\r\n    setHighScore(parseInt(stored));\r\n  }\r\n\r\n  // Manage game loop interval\r\n  if (!gameOver && !isPaused) {\r\n    intervalRef.current = setInterval(moveSnake, getSpeed());\r\n  }\r\n\r\n  // Clear interval on cleanup\r\n  return () => clearInterval(intervalRef.current);\r\n}, [gameOver, isPaused]);\r\n\r\n\r\n  useEffect(() => {\r\n    const handleKey = (e) => {\r\n      const key = e.key.toLowerCase();\r\n      const { x, y } = dirRef.current;\r\n\r\n      if (key === \"p\") {\r\n        setIsPaused(prev => !prev);\r\n        return;\r\n      }\r\n\r\n      switch (key) {\r\n        case \"arrowup\":\r\n        case \"w\":\r\n          if (y !== 1) dirRef.current = { x: 0, y: -1 };\r\n          break;\r\n        case \"arrowdown\":\r\n        case \"s\":\r\n          if (y !== -1) dirRef.current = { x: 0, y: 1 };\r\n          break;\r\n        case \"arrowleft\":\r\n        case \"a\":\r\n          if (x !== 1) dirRef.current = { x: -1, y: 0 };\r\n          break;\r\n        case \"arrowright\":\r\n        case \"d\":\r\n          if (x !== -1) dirRef.current = { x: 1, y: 0 };\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"keydown\", handleKey);\r\n    return () => window.removeEventListener(\"keydown\", handleKey);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center w-full px-4 pb-10 gap-y-6\">\r\n\r\n      {/* GAME BOX */}\r\n      <div className={`w-full max-w-md rounded-lg border p-4 shadow-lg transition-colors duration-300 ${\r\n        isDark ? \"bg-slate-800 text-white border-slate-700\" : \"bg-white text-black border-gray-300\"\r\n    }`}>\r\n\r\n\r\n        {/* Score & High Score */}\r\n        <div className=\"flex justify-between text-sm mb-2\">\r\n          <span>Score: {score}</span>\r\n          <span>High Score: {highScore}</span>\r\n        </div>\r\n\r\n        {/* Pause / Game Over */}\r\n        {isPaused && (\r\n          <p className=\"text-yellow-500 text-center text-sm mb-2\">⏸️ Paused — press 'P' or click resume</p>\r\n        )}\r\n        {gameOver && (\r\n          <p className=\"text-red-500 text-center font-bold text-sm mb-2\">💀 Game Over — Final Score: {score}</p>\r\n        )}\r\n\r\n        {/* Canvas */}\r\n        <div className=\"flex justify-center\">\r\n          <canvas\r\n            ref={canvasRef}\r\n            width={canvasSize.width}\r\n            height={canvasSize.height}\r\n            style={{ width: canvasSize.width, height: canvasSize.height, imageRendering: \"pixelated\" }}\r\n            className={isDark ? \"border border-slate-700 bg-black\" : \"border border-gray-400 bg-black\"}\r\n          />\r\n        </div>\r\n\r\n        {/* Buttons */}\r\n<div className=\"flex justify-center gap-3 mt-4\">\r\n  {gameOver ? (\r\n    <button\r\n      onClick={resetGame}\r\n      className=\"bg-slate-700 text-white px-4 py-1 rounded hover:bg-slate-600\"\r\n    >\r\n      Restart\r\n    </button>\r\n  ) : (\r\n    <button\r\n      onClick={() => setIsPaused(prev => !prev)}\r\n      className=\"bg-slate-700 text-white px-4 py-1 rounded hover:bg-slate-600\"\r\n    >\r\n      {isPaused ? \"Resume\" : \"Pause\"}\r\n    </button>\r\n  )}\r\n</div>\r\n\r\n      </div>\r\n\r\n      {/* ABOUT BOX */}\r\n      <div className={`w-full max-w-md rounded-lg border p-4 text-sm transition-colors duration-300 ${\r\n         isDark ? \"bg-slate-800 text-white border-slate-700\" : \"bg-white text-black border-gray-300\"\r\n      }`}>\r\n        <p className=\"font-semibold text-base mb-1 text-green-600 dark:text-green-400\">About Snake</p>\r\n        <p>\r\n          Navigate the snake to eat food and grow longer. Avoid running into the walls or yourself.\r\n        </p>\r\n        <p className=\"mt-2\">\r\n          <span className=\"font-semibold\">Controls:</span> Arrow keys or WASD to move, <kbd>P</kbd> to pause/resume.\r\n        </p>\r\n        <p>\r\n          <span className=\"font-semibold\">Objective:</span> Grow the longest snake you can!\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SnakeGame;\r\n"],"names":["canvasSize","rows","columns","_ref","isDark","canvasRef","useRef","ctxRef","snakeRef","x","y","dirRef","foodRef","randomFood","intervalRef","gameOver","setGameOver","useState","score","setScore","highScore","setHighScore","isPaused","setIsPaused","snake","current","newFood","Math","floor","random","some","segment","getSpeed","length","moveSnake","head","_objectSpread","hitWall","hitSelf","clearInterval","unshift","newScore","localStorage","setItem","toString","pop","drawGame","setInterval","ctx","clearRect","fillStyle","fillRect","forEach","useEffect","getContext","setTransform","stored","getItem","parseInt","handleKey","e","key","toLowerCase","prev","window","addEventListener","removeEventListener","_jsxs","className","children","concat","_jsx","ref","width","height","style","imageRendering","onClick","resetGame"],"sourceRoot":""}