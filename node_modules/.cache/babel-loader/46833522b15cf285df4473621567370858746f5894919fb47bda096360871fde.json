{"ast":null,"code":"import _objectSpread from\"C:/portfolio/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useRef,useEffect,useState}from\"react\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const DEFAULT_MODE={COLS:10,ROWS:20,DROP_INTERVAL:500};const EASY_MODE={COLS:14,ROWS:20,DROP_INTERVAL:800};const HARD_MODE=DEFAULT_MODE;const BLOCK_SIZE=30;// canvasWidth and canvasHeight will be defined inside the component\nconst TETROMINOES={I:{shape:[[0,0,0,0],[1,1,1,1],[0,0,0,0],[0,0,0,0]],color:\"#06b6d4\"},J:{shape:[[1,0,0],[1,1,1],[0,0,0]],color:\"#3b82f6\"},L:{shape:[[0,0,1],[1,1,1],[0,0,0]],color:\"#f97316\"},O:{shape:[[1,1],[1,1]],color:\"#facc15\"},S:{shape:[[0,1,1],[1,1,0],[0,0,0]],color:\"#22c55e\"},T:{shape:[[0,1,0],[1,1,1],[0,0,0]],color:\"#a855f7\"},Z:{shape:[[1,1,0],[0,1,1],[0,0,0]],color:\"#ef4444\"}};const randomTetromino=()=>{const keys=Object.keys(TETROMINOES);const rand=keys[Math.floor(Math.random()*keys.length)];return _objectSpread(_objectSpread({},TETROMINOES[rand]),{},{x:3,y:0});};const rotateMatrix=matrix=>matrix[0].map((_,i)=>matrix.map(row=>row[i]).reverse());const isValidMove=(shape,grid,offsetX,offsetY,ROWS,COLS)=>{for(let y=0;y<shape.length;y++){for(let x=0;x<shape[y].length;x++){if(shape[y][x]){const newY=y+offsetY;const newX=x+offsetX;if(newY>=ROWS||newX<0||newX>=COLS||grid[newY]&&grid[newY][newX]){return false;}}}}return true;};const mergeTetromino=(grid,tetromino,ROWS)=>{const newGrid=grid.map(row=>[...row]);const{shape,x,y}=tetromino;shape.forEach((row,dy)=>{row.forEach((val,dx)=>{if(val&&y+dy<ROWS&&x+dx>=0){newGrid[y+dy][x+dx]=tetromino.color;}});});return newGrid;};const clearLines=(grid,ROWS,COLS)=>{const newGrid=grid.filter(row=>row.some(cell=>cell===0));const linesCleared=ROWS-newGrid.length;while(newGrid.length<ROWS)newGrid.unshift(Array(COLS).fill(0));return{grid:newGrid,linesCleared};};const TetrisGame=_ref=>{let{isDark}=_ref;const[mode,setMode]=useState(HARD_MODE);const COLS=mode.COLS;const ROWS=mode.ROWS;const canvasWidth=COLS*BLOCK_SIZE;const canvasHeight=ROWS*BLOCK_SIZE;const canvasRef=useRef(null);const[grid,setGrid]=useState(Array.from({length:ROWS},()=>Array(COLS).fill(0)));const gridRef=useRef(grid);const[activeBlock,setActiveBlock]=useState(randomTetromino());const activeBlockRef=useRef(activeBlock);const[isRunning,setIsRunning]=useState(false);const[isPaused,setIsPaused]=useState(false);const[isGameOver,setIsGameOver]=useState(false);const[score,setScore]=useState(0);const[highScore,setHighScore]=useState(0);const dropCounterRef=useRef(0);const lastTimeRef=useRef(0);const requestRef=useRef();useEffect(()=>{activeBlockRef.current=activeBlock;},[activeBlock]);useEffect(()=>{gridRef.current=grid;},[grid]);const draw=ctx=>{ctx.clearRect(0,0,canvasWidth,canvasHeight);for(let y=0;y<ROWS;y++){for(let x=0;x<COLS;x++){if(gridRef.current[y][x]){ctx.fillStyle=gridRef.current[y][x];ctx.fillRect(x*BLOCK_SIZE,y*BLOCK_SIZE,BLOCK_SIZE,BLOCK_SIZE);ctx.strokeStyle=\"#1e3a8a\";ctx.strokeRect(x*BLOCK_SIZE,y*BLOCK_SIZE,BLOCK_SIZE,BLOCK_SIZE);}}}const{shape,x,y,color}=activeBlockRef.current;shape.forEach((row,dy)=>{row.forEach((val,dx)=>{if(val){ctx.fillStyle=color;ctx.fillRect((x+dx)*BLOCK_SIZE,(y+dy)*BLOCK_SIZE,BLOCK_SIZE,BLOCK_SIZE);ctx.strokeStyle=\"#1e3a8a\";ctx.strokeRect((x+dx)*BLOCK_SIZE,(y+dy)*BLOCK_SIZE,BLOCK_SIZE,BLOCK_SIZE);}});});};const gameLoop=time=>{if(!canvasRef.current)return;const canvas=canvasRef.current;const ctx=canvas.getContext(\"2d\");const deltaTime=time-lastTimeRef.current;lastTimeRef.current=time;dropCounterRef.current+=deltaTime;const dropInterval=mode.DROP_INTERVAL;if(isRunning&&!isPaused&&dropCounterRef.current>dropInterval){dropCounterRef.current=0;const moved=_objectSpread(_objectSpread({},activeBlockRef.current),{},{y:activeBlockRef.current.y+1});if(isValidMove(moved.shape,gridRef.current,moved.x,moved.y,ROWS,COLS)){setActiveBlock(moved);}else{const merged=mergeTetromino(gridRef.current,activeBlockRef.current,ROWS);const{grid:cleared,linesCleared}=clearLines(merged,ROWS,COLS);if(linesCleared>0){const points=[0,100,300,500,800][linesCleared]||0;setScore(prev=>prev+points);}setGrid(cleared);const nextBlock=randomTetromino();// Check for game over: if the next block collides immediately\nif(!isValidMove(nextBlock.shape,gridRef.current,nextBlock.x,nextBlock.y,ROWS,COLS)){setIsRunning(false);setIsGameOver(true);return;}setActiveBlock(nextBlock);activeBlockRef.current=nextBlock;}}draw(ctx);requestRef.current=requestAnimationFrame(gameLoop);};useEffect(()=>{if(isRunning){handleStart();}},[mode]);useEffect(()=>{if(isRunning&&!isPaused){lastTimeRef.current=performance.now();requestRef.current=requestAnimationFrame(gameLoop);}return()=>cancelAnimationFrame(requestRef.current);},[isRunning,isPaused]);useEffect(()=>{if(isRunning&&!isPaused){const ctx=canvasRef.current.getContext(\"2d\");draw(ctx);}},[grid,activeBlock]);useEffect(()=>{const handleKey=e=>{if(!isRunning||isPaused)return;let moved=_objectSpread({},activeBlockRef.current);if(e.key===\"ArrowLeft\"||e.key.toLowerCase()===\"a\")moved.x--;else if(e.key===\"ArrowRight\"||e.key.toLowerCase()===\"d\")moved.x++;else if(e.key===\"ArrowDown\"||e.key.toLowerCase()===\"s\")moved.y++;else if(e.key===\"ArrowUp\"||e.key.toLowerCase()===\"w\"){const rotated=rotateMatrix(activeBlockRef.current.shape);if(isValidMove(rotated,gridRef.current,activeBlockRef.current.x,activeBlockRef.current.y,ROWS,COLS)){setActiveBlock(_objectSpread(_objectSpread({},activeBlockRef.current),{},{shape:rotated}));return;}}if(isValidMove(moved.shape,gridRef.current,moved.x,moved.y,ROWS,COLS))setActiveBlock(moved);};window.addEventListener(\"keydown\",handleKey);return()=>window.removeEventListener(\"keydown\",handleKey);},[isRunning,isPaused,grid]);const handleStart=()=>{setGrid(Array.from({length:ROWS},()=>Array(COLS).fill(0)));setScore(0);setHighScore(prev=>Math.max(prev,score));setIsGameOver(false);const newBlock=randomTetromino();setActiveBlock(newBlock);activeBlockRef.current=newBlock;setIsRunning(true);setIsPaused(false);// Delay drawing slightly until canvas is mounted\nsetTimeout(()=>{if(canvasRef.current){const ctx=canvasRef.current.getContext(\"2d\");draw(ctx);}},0);};const handlePause=()=>{if(isRunning)setIsPaused(prev=>!prev);};return/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col items-center w-full px-4 pb-10 gap-y-4\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex gap-4 flex-wrap justify-center\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>{setIsRunning(false);setIsPaused(false);setIsGameOver(false);setGrid(Array.from({length:ROWS},()=>Array(COLS).fill(0)));setScore(0);cancelAnimationFrame(requestRef.current);},disabled:!isRunning,className:\"px-2 py-1 rounded-md border text-white bg-gray-700\",children:\"Exit\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setMode(EASY_MODE),disabled:isRunning,className:\"px-2 py-1 rounded-md border text-white bg-green-500\",children:\"Easy\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setMode(HARD_MODE),disabled:isRunning,className:\"px-2 py-1 rounded-md border text-white bg-red-500\",children:\"Hard\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleStart,className:\"px-2 py-1 rounded-md border text-white \".concat(isRunning?\"bg-slate-600\":\"bg-green-600\"),children:\"Start\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handlePause,disabled:!isRunning,className:\"px-2 py-1 rounded-md border text-white \".concat(isPaused?\"bg-yellow-600\":isDark?\"bg-blue-600\":\"bg-slate-600\"),children:isPaused?\"Resume\":\"Pause\"})]}),/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,width:canvasWidth,height:canvasHeight,className:\"border border-slate-700 bg-black\",style:{imageRendering:\"pixelated\"}}),/*#__PURE__*/_jsxs(\"div\",{className:\"\".concat(isDark?\"text-white\":\"text-black\",\" font-semibold text-lg\"),children:[\"Score: \",score]}),/*#__PURE__*/_jsxs(\"div\",{className:\"\".concat(isDark?\"text-white\":\"text-black\",\" font-medium\"),children:[\"High Score: \",highScore]}),isGameOver&&/*#__PURE__*/_jsx(\"div\",{className:\"mt-4 p-4 text-center text-red-500 font-bold bg-white bg-opacity-10 rounded\",children:\"Game Over\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"\".concat(isDark?\"bg-slate-800 text-slate-200\":\"bg-slate-100 text-slate-800\",\" max-w-md mt-4 p-4 rounded-md text-sm shadow transition-colors\"),children:[/*#__PURE__*/_jsx(\"p\",{className:\"\".concat(isDark?\"text-emerald-400\":\"text-emerald-600\",\" font-semibold\"),children:\"About Tetris\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Tetris is a puzzle game where blocks (tetrominoes) fall from the top. Your goal is to move and rotate them to create full rows, which clear and score points!\"}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{className:\"\".concat(isDark?\"text-white\":\"text-black\",\" font-semibold\"),children:\"Controls:\"}),\" \",\"Use \",/*#__PURE__*/_jsx(\"span\",{className:\"font-mono\",children:\"W\"}),\"/\",/*#__PURE__*/_jsx(\"span\",{className:\"font-mono\",children:\"A\"}),\"/\",/*#__PURE__*/_jsx(\"span\",{className:\"font-mono\",children:\"S\"}),\"/\",/*#__PURE__*/_jsx(\"span\",{className:\"font-mono\",children:\"D\"}),\" or arrow keys to move. Down or S to drop faster. W or up to rotate. A and D or left/right arrows to move left/right.\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{className:\"\".concat(isDark?\"text-white\":\"text-black\",\" font-semibold\"),children:\"Goal:\"}),\" \",\"Clear as many lines as possible!\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{className:\"\".concat(isDark?\"text-white\":\"text-black\",\" font-semibold\"),children:\"Modes:\"}),\" \",\"Easy gives you more time and space. Hard is faster and narrower. Choose your challenge!\"]})]})]});};export default TetrisGame;","map":{"version":3,"names":["React","useRef","useEffect","useState","jsx","_jsx","jsxs","_jsxs","DEFAULT_MODE","COLS","ROWS","DROP_INTERVAL","EASY_MODE","HARD_MODE","BLOCK_SIZE","TETROMINOES","I","shape","color","J","L","O","S","T","Z","randomTetromino","keys","Object","rand","Math","floor","random","length","_objectSpread","x","y","rotateMatrix","matrix","map","_","i","row","reverse","isValidMove","grid","offsetX","offsetY","newY","newX","mergeTetromino","tetromino","newGrid","forEach","dy","val","dx","clearLines","filter","some","cell","linesCleared","unshift","Array","fill","TetrisGame","_ref","isDark","mode","setMode","canvasWidth","canvasHeight","canvasRef","setGrid","from","gridRef","activeBlock","setActiveBlock","activeBlockRef","isRunning","setIsRunning","isPaused","setIsPaused","isGameOver","setIsGameOver","score","setScore","highScore","setHighScore","dropCounterRef","lastTimeRef","requestRef","current","draw","ctx","clearRect","fillStyle","fillRect","strokeStyle","strokeRect","gameLoop","time","canvas","getContext","deltaTime","dropInterval","moved","merged","cleared","points","prev","nextBlock","requestAnimationFrame","handleStart","performance","now","cancelAnimationFrame","handleKey","e","key","toLowerCase","rotated","window","addEventListener","removeEventListener","max","newBlock","setTimeout","handlePause","className","children","onClick","disabled","concat","ref","width","height","style","imageRendering"],"sources":["C:/portfolio/src/components/TetrisGame.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\n\r\nconst DEFAULT_MODE = { COLS: 10, ROWS: 20, DROP_INTERVAL: 500 };\r\nconst EASY_MODE = { COLS: 14, ROWS: 20, DROP_INTERVAL: 800 };\r\nconst HARD_MODE = DEFAULT_MODE;\r\nconst BLOCK_SIZE = 30;\r\n// canvasWidth and canvasHeight will be defined inside the component\r\n\r\nconst TETROMINOES = {\r\n  I: { shape: [[0,0,0,0],[1,1,1,1],[0,0,0,0],[0,0,0,0]], color: \"#06b6d4\" },\r\n  J: { shape: [[1,0,0],[1,1,1],[0,0,0]], color: \"#3b82f6\" },\r\n  L: { shape: [[0,0,1],[1,1,1],[0,0,0]], color: \"#f97316\" },\r\n  O: { shape: [[1,1],[1,1]], color: \"#facc15\" },\r\n  S: { shape: [[0,1,1],[1,1,0],[0,0,0]], color: \"#22c55e\" },\r\n  T: { shape: [[0,1,0],[1,1,1],[0,0,0]], color: \"#a855f7\" },\r\n  Z: { shape: [[1,1,0],[0,1,1],[0,0,0]], color: \"#ef4444\" },\r\n};\r\n\r\nconst randomTetromino = () => {\r\n  const keys = Object.keys(TETROMINOES);\r\n  const rand = keys[Math.floor(Math.random() * keys.length)];\r\n  return { ...TETROMINOES[rand], x: 3, y: 0 };\r\n};\r\n\r\nconst rotateMatrix = (matrix) => matrix[0].map((_, i) => matrix.map(row => row[i]).reverse());\r\n\r\nconst isValidMove = (shape, grid, offsetX, offsetY, ROWS, COLS) => {\r\n  for (let y = 0; y < shape.length; y++) {\r\n    for (let x = 0; x < shape[y].length; x++) {\r\n      if (shape[y][x]) {\r\n        const newY = y + offsetY;\r\n        const newX = x + offsetX;\r\n        if (\r\n          newY >= ROWS ||\r\n          newX < 0 ||\r\n          newX >= COLS ||\r\n          (grid[newY] && grid[newY][newX])\r\n        ) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\nconst mergeTetromino = (grid, tetromino, ROWS) => {\r\n  const newGrid = grid.map(row => [...row]);\r\n  const { shape, x, y } = tetromino;\r\n  shape.forEach((row, dy) => {\r\n    row.forEach((val, dx) => {\r\n      if (val && y + dy < ROWS && x + dx >= 0) {\r\n        newGrid[y + dy][x + dx] = tetromino.color;\r\n      }\r\n    });\r\n  });\r\n  return newGrid;\r\n};\r\n\r\nconst clearLines = (grid, ROWS, COLS) => {\r\n  const newGrid = grid.filter(row => row.some(cell => cell === 0));\r\n  const linesCleared = ROWS - newGrid.length;\r\n  while (newGrid.length < ROWS) newGrid.unshift(Array(COLS).fill(0));\r\n  return { grid: newGrid, linesCleared };\r\n};\r\n\r\nconst TetrisGame = ({ isDark }) => {\r\n  const [mode, setMode] = useState(HARD_MODE);\r\n  const COLS = mode.COLS;\r\n  const ROWS = mode.ROWS;\r\n  const canvasWidth = COLS * BLOCK_SIZE;\r\n  const canvasHeight = ROWS * BLOCK_SIZE;\r\n  const canvasRef = useRef(null);\r\n  const [grid, setGrid] = useState(Array.from({ length: ROWS }, () => Array(COLS).fill(0)));\r\n  const gridRef = useRef(grid);\r\n  const [activeBlock, setActiveBlock] = useState(randomTetromino());\r\n  const activeBlockRef = useRef(activeBlock);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [highScore, setHighScore] = useState(0);\r\n\r\n  const dropCounterRef = useRef(0);\r\n  const lastTimeRef = useRef(0);\r\n  const requestRef = useRef();\r\n\r\n  useEffect(() => {\r\n    activeBlockRef.current = activeBlock;\r\n  }, [activeBlock]);\r\n\r\n  useEffect(() => {\r\n    gridRef.current = grid;\r\n  }, [grid]);\r\n\r\n  const draw = (ctx) => {\r\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n    for (let y = 0; y < ROWS; y++) {\r\n      for (let x = 0; x < COLS; x++) {\r\n        if (gridRef.current[y][x]) {\r\n        ctx.fillStyle = gridRef.current[y][x];\r\n        ctx.fillRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);\r\n          ctx.strokeStyle = \"#1e3a8a\";\r\n          ctx.strokeRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);\r\n        }\r\n      }\r\n    }\r\n    const { shape, x, y, color } = activeBlockRef.current;\r\n    shape.forEach((row, dy) => {\r\n      row.forEach((val, dx) => {\r\n        if (val) {\r\n          ctx.fillStyle = color;\r\n          ctx.fillRect((x + dx) * BLOCK_SIZE, (y + dy) * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);\r\n          ctx.strokeStyle = \"#1e3a8a\";\r\n          ctx.strokeRect((x + dx) * BLOCK_SIZE, (y + dy) * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  const gameLoop = (time) => {\r\n    if (!canvasRef.current) return;\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    const deltaTime = time - lastTimeRef.current;\r\n    lastTimeRef.current = time;\r\n    dropCounterRef.current += deltaTime;\r\n\r\n    const dropInterval = mode.DROP_INTERVAL;\r\n\r\n    if (isRunning && !isPaused && dropCounterRef.current > dropInterval) {\r\n      dropCounterRef.current = 0;\r\n      const moved = { ...activeBlockRef.current, y: activeBlockRef.current.y + 1 };\r\n      if (isValidMove(moved.shape, gridRef.current, moved.x, moved.y, ROWS, COLS)) {\r\n        setActiveBlock(moved);\r\n      } else {\r\n        const merged = mergeTetromino(gridRef.current, activeBlockRef.current, ROWS);\r\n        const { grid: cleared, linesCleared } = clearLines(merged, ROWS, COLS);\r\n        if (linesCleared > 0) {\r\n          const points = [0, 100, 300, 500, 800][linesCleared] || 0;\r\n          setScore(prev => prev + points);\r\n        }\r\n        setGrid(cleared);\r\n        const nextBlock = randomTetromino();\r\n        // Check for game over: if the next block collides immediately\r\n        if (!isValidMove(nextBlock.shape, gridRef.current, nextBlock.x, nextBlock.y, ROWS, COLS)) {\r\n          setIsRunning(false);\r\n          setIsGameOver(true);\r\n          return;\r\n        }\r\n        setActiveBlock(nextBlock);\r\n        activeBlockRef.current = nextBlock;\r\n      }\r\n    }\r\n\r\n    draw(ctx);\r\n    requestRef.current = requestAnimationFrame(gameLoop);\r\n  };\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      handleStart();\r\n    }\r\n  }, [mode]);\r\n\r\n  useEffect(() => {\r\n    if (isRunning && !isPaused) {\r\n      lastTimeRef.current = performance.now();\r\n      requestRef.current = requestAnimationFrame(gameLoop);\r\n    }\r\n    return () => cancelAnimationFrame(requestRef.current);\r\n  }, [isRunning, isPaused]);\r\n\r\n  useEffect(() => {\r\n    if (isRunning && !isPaused) {\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n      draw(ctx);\r\n    }\r\n  }, [grid, activeBlock]);\r\n\r\n  useEffect(() => {\r\n    const handleKey = (e) => {\r\n      if (!isRunning || isPaused) return;\r\n      let moved = { ...activeBlockRef.current };\r\n      if (e.key === \"ArrowLeft\" || e.key.toLowerCase() === \"a\") moved.x--;\r\n      else if (e.key === \"ArrowRight\" || e.key.toLowerCase() === \"d\") moved.x++;\r\n      else if (e.key === \"ArrowDown\" || e.key.toLowerCase() === \"s\") moved.y++;\r\n      else if (e.key === \"ArrowUp\" || e.key.toLowerCase() === \"w\") {\r\n        const rotated = rotateMatrix(activeBlockRef.current.shape);\r\n        if (isValidMove(rotated, gridRef.current, activeBlockRef.current.x, activeBlockRef.current.y, ROWS, COLS)) {\r\n          setActiveBlock({ ...activeBlockRef.current, shape: rotated });\r\n          return;\r\n        }\r\n      }\r\n      if (isValidMove(moved.shape, gridRef.current, moved.x, moved.y, ROWS, COLS)) setActiveBlock(moved);\r\n    };\r\n\r\n    window.addEventListener(\"keydown\", handleKey);\r\n    return () => window.removeEventListener(\"keydown\", handleKey);\r\n  }, [isRunning, isPaused, grid]);\r\n\r\n  const handleStart = () => {\r\n    setGrid(Array.from({ length: ROWS }, () => Array(COLS).fill(0)));\r\n    setScore(0);\r\n    setHighScore(prev => Math.max(prev, score));\r\n    setIsGameOver(false);\r\n    const newBlock = randomTetromino();\r\n    setActiveBlock(newBlock);\r\n    activeBlockRef.current = newBlock;\r\n    setIsRunning(true);\r\n    setIsPaused(false);\r\n\r\n    // Delay drawing slightly until canvas is mounted\r\n    setTimeout(() => {\r\n      if (canvasRef.current) {\r\n        const ctx = canvasRef.current.getContext(\"2d\");\r\n        draw(ctx);\r\n      }\r\n    }, 0);\r\n  };\r\n\r\n  const handlePause = () => {\r\n    if (isRunning) setIsPaused((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center w-full px-4 pb-10 gap-y-4\">\r\n      <div className=\"flex gap-4 flex-wrap justify-center\">\r\n        <button\r\n          onClick={() => {\r\n            setIsRunning(false);\r\n            setIsPaused(false);\r\n            setIsGameOver(false);\r\n            setGrid(Array.from({ length: ROWS }, () => Array(COLS).fill(0)));\r\n            setScore(0);\r\n            cancelAnimationFrame(requestRef.current);\r\n          }}\r\n          disabled={!isRunning}\r\n          className=\"px-2 py-1 rounded-md border text-white bg-gray-700\"\r\n        >\r\n          Exit\r\n        </button>\r\n        <button\r\n          onClick={() => setMode(EASY_MODE)}\r\n          disabled={isRunning}\r\n          className=\"px-2 py-1 rounded-md border text-white bg-green-500\"\r\n        >\r\n          Easy\r\n        </button>\r\n        <button\r\n          onClick={() => setMode(HARD_MODE)}\r\n          disabled={isRunning}\r\n          className=\"px-2 py-1 rounded-md border text-white bg-red-500\"\r\n        >\r\n          Hard\r\n        </button>\r\n        <button\r\n          onClick={handleStart}\r\n          className={`px-2 py-1 rounded-md border text-white ${isRunning ? \"bg-slate-600\" : \"bg-green-600\"}`}\r\n        >\r\n          Start\r\n        </button>\r\n        <button\r\n          onClick={handlePause}\r\n          disabled={!isRunning}\r\n          className={`px-2 py-1 rounded-md border text-white ${isPaused ? \"bg-yellow-600\" : isDark ? \"bg-blue-600\" : \"bg-slate-600\"}`}\r\n        >\r\n          {isPaused ? \"Resume\" : \"Pause\"}\r\n        </button>\r\n      </div>\r\n\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={canvasWidth}\r\n        height={canvasHeight}\r\n        className=\"border border-slate-700 bg-black\"\r\n        style={{ imageRendering: \"pixelated\" }}\r\n      />\r\n\r\n      <div className={`${isDark ? \"text-white\" : \"text-black\"} font-semibold text-lg`}>\r\n        Score: {score}\r\n      </div>\r\n      <div className={`${isDark ? \"text-white\" : \"text-black\"} font-medium`}>\r\n        High Score: {highScore}\r\n      </div>\r\n\r\n\r\n      {isGameOver && (\r\n        <div className=\"mt-4 p-4 text-center text-red-500 font-bold bg-white bg-opacity-10 rounded\">\r\n          Game Over\r\n        </div>\r\n      )}\r\n\r\n      {/* Info Box */}\r\n<div\r\n  className={`${isDark ? \"bg-slate-800 text-slate-200\" : \"bg-slate-100 text-slate-800\"} max-w-md mt-4 p-4 rounded-md text-sm shadow transition-colors`}\r\n>\r\n  <p className={`${isDark ? \"text-emerald-400\" : \"text-emerald-600\"} font-semibold`}>\r\n    About Tetris\r\n  </p>\r\n  <p>\r\n    Tetris is a puzzle game where blocks (tetrominoes) fall from the top. Your goal is to move and rotate them to create full rows, which clear and score points!\r\n  </p>\r\n  <p>\r\n    <span className={`${isDark ? \"text-white\" : \"text-black\"} font-semibold`}>Controls:</span>{\" \"}\r\n    Use <span className=\"font-mono\">W</span>/<span className=\"font-mono\">A</span>/<span className=\"font-mono\">S</span>/<span className=\"font-mono\">D</span> or arrow keys to move. Down or S to drop faster. W or up to rotate. A and D or left/right arrows to move left/right.\r\n    </p>\r\n  <p>\r\n    <span className={`${isDark ? \"text-white\" : \"text-black\"} font-semibold`}>Goal:</span>{\" \"}\r\n    Clear as many lines as possible!\r\n  </p>\r\n  <p>\r\n    <span className={`${isDark ? \"text-white\" : \"text-black\"} font-semibold`}>Modes:</span>{\" \"}\r\n    Easy gives you more time and space. Hard is faster and narrower. Choose your challenge!\r\n  </p>\r\n</div>\r\n\r\n    </div>\r\n\r\n    \r\n  );\r\n\r\n  \r\n};\r\n\r\nexport default TetrisGame;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}