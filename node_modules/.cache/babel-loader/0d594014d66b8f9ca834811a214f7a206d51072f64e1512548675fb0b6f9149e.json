{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shawj\\\\Desktop\\\\ALL\\\\portfolio\\\\src\\\\components\\\\TetrisGame.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLS = 10;\nconst ROWS = 20;\nconst BLOCK_SIZE = 30;\nconst canvasWidth = COLS * BLOCK_SIZE;\nconst canvasHeight = ROWS * BLOCK_SIZE;\nconst TetrisGame = ({\n  isDark\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [grid, setGrid] = useState(Array.from({\n    length: ROWS\n  }, () => Array(COLS).fill(0)));\n  const drawGrid = ctx => {\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n    for (let y = 0; y < ROWS; y++) {\n      for (let x = 0; x < COLS; x++) {\n        if (grid[y][x]) {\n          ctx.fillStyle = \"#38bdf8\"; // light blue blocks\n          ctx.fillRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);\n          ctx.strokeStyle = \"#1e3a8a\";\n          ctx.strokeRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const loop = () => {\n      drawGrid(ctx);\n      requestAnimationFrame(loop);\n    };\n    requestAnimationFrame(loop);\n  }, [grid]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center w-full px-4 pb-10\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: canvasWidth,\n      height: canvasHeight,\n      className: \"border border-slate-700 bg-black\",\n      style: {\n        imageRendering: \"pixelated\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `max-w-md mt-4 p-4 rounded-md text-sm shadow transition-colors ${isDark ? \"bg-slate-800 text-slate-200\" : \"bg-slate-100 text-slate-800\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: `${isDark ? \"text-emerald-400\" : \"text-emerald-600\"} font-semibold`,\n        children: \"About Tetris\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Tetris is a puzzle game where blocks (tetrominoes) fall from the top. Your goal is to move and rotate them to create full rows, which clear and score points!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: `${isDark ? \"text-white\" : \"text-black\"} font-semibold`,\n          children: \"Controls:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), \" \", \"Arrow keys to move/rotate. Down key to drop faster.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: `${isDark ? \"text-white\" : \"text-black\"} font-semibold`,\n          children: \"Goal:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), \" \", \"Clear as many lines as possible!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(TetrisGame, \"0zUrPZkD3VyzkNkSR/4dkKfjsJ4=\");\n_c = TetrisGame;\nexport default TetrisGame;\nvar _c;\n$RefreshReg$(_c, \"TetrisGame\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","COLS","ROWS","BLOCK_SIZE","canvasWidth","canvasHeight","TetrisGame","isDark","_s","canvasRef","grid","setGrid","Array","from","length","fill","drawGrid","ctx","clearRect","y","x","fillStyle","fillRect","strokeStyle","strokeRect","canvas","current","getContext","loop","requestAnimationFrame","className","children","ref","width","height","style","imageRendering","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shawj/Desktop/ALL/portfolio/src/components/TetrisGame.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\n\r\nconst COLS = 10;\r\nconst ROWS = 20;\r\nconst BLOCK_SIZE = 30;\r\nconst canvasWidth = COLS * BLOCK_SIZE;\r\nconst canvasHeight = ROWS * BLOCK_SIZE;\r\n\r\nconst TetrisGame = ({ isDark }) => {\r\n  const canvasRef = useRef(null);\r\n  const [grid, setGrid] = useState(\r\n    Array.from({ length: ROWS }, () => Array(COLS).fill(0))\r\n  );\r\n\r\n  const drawGrid = (ctx) => {\r\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n    for (let y = 0; y < ROWS; y++) {\r\n      for (let x = 0; x < COLS; x++) {\r\n        if (grid[y][x]) {\r\n          ctx.fillStyle = \"#38bdf8\"; // light blue blocks\r\n          ctx.fillRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);\r\n          ctx.strokeStyle = \"#1e3a8a\";\r\n          ctx.strokeRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    const loop = () => {\r\n      drawGrid(ctx);\r\n      requestAnimationFrame(loop);\r\n    };\r\n\r\n    requestAnimationFrame(loop);\r\n  }, [grid]);\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center w-full px-4 pb-10\">\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={canvasWidth}\r\n        height={canvasHeight}\r\n        className=\"border border-slate-700 bg-black\"\r\n        style={{ imageRendering: \"pixelated\" }}\r\n      />\r\n      <div className={`max-w-md mt-4 p-4 rounded-md text-sm shadow transition-colors ${\r\n        isDark ? \"bg-slate-800 text-slate-200\" : \"bg-slate-100 text-slate-800\"\r\n      }`}>\r\n        <p className={`${isDark ? \"text-emerald-400\" : \"text-emerald-600\"} font-semibold`}>About Tetris</p>\r\n        <p>\r\n          Tetris is a puzzle game where blocks (tetrominoes) fall from the top. Your goal is to move and rotate them\r\n          to create full rows, which clear and score points!\r\n        </p>\r\n        <p>\r\n          <span className={`${isDark ? \"text-white\" : \"text-black\"} font-semibold`}>Controls:</span>{\" \"}\r\n          Arrow keys to move/rotate. Down key to drop faster.\r\n        </p>\r\n        <p>\r\n          <span className={`${isDark ? \"text-white\" : \"text-black\"} font-semibold`}>Goal:</span>{\" \"}\r\n          Clear as many lines as possible!\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TetrisGame;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}