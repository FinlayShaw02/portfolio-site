{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shawj\\\\Desktop\\\\ALL\\\\portfolio\\\\src\\\\components\\\\TetrisGame.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEFAULT_MODE = {\n  COLS: 10,\n  ROWS: 20,\n  DROP_INTERVAL: 500\n};\nconst EASY_MODE = {\n  COLS: 14,\n  ROWS: 20,\n  DROP_INTERVAL: 800\n};\nconst HARD_MODE = DEFAULT_MODE;\nconst BLOCK_SIZE = 30;\nconst canvasWidth = mode.COLS * BLOCK_SIZE;\nconst canvasHeight = mode.ROWS * BLOCK_SIZE;\nconst TETROMINOES = {\n  I: {\n    shape: [[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]],\n    color: \"#06b6d4\"\n  },\n  J: {\n    shape: [[1, 0, 0], [1, 1, 1], [0, 0, 0]],\n    color: \"#3b82f6\"\n  },\n  L: {\n    shape: [[0, 0, 1], [1, 1, 1], [0, 0, 0]],\n    color: \"#f97316\"\n  },\n  O: {\n    shape: [[1, 1], [1, 1]],\n    color: \"#facc15\"\n  },\n  S: {\n    shape: [[0, 1, 1], [1, 1, 0], [0, 0, 0]],\n    color: \"#22c55e\"\n  },\n  T: {\n    shape: [[0, 1, 0], [1, 1, 1], [0, 0, 0]],\n    color: \"#a855f7\"\n  },\n  Z: {\n    shape: [[1, 1, 0], [0, 1, 1], [0, 0, 0]],\n    color: \"#ef4444\"\n  }\n};\nconst randomTetromino = () => {\n  const keys = Object.keys(TETROMINOES);\n  const rand = keys[Math.floor(Math.random() * keys.length)];\n  return {\n    ...TETROMINOES[rand],\n    x: 3,\n    y: 0\n  };\n};\nconst rotateMatrix = matrix => matrix[0].map((_, i) => matrix.map(row => row[i]).reverse());\nconst isValidMove = (shape, grid, offsetX, offsetY) => {\n  for (let y = 0; y < shape.length; y++) {\n    for (let x = 0; x < shape[y].length; x++) {\n      if (shape[y][x]) {\n        const newY = y + offsetY;\n        const newX = x + offsetX;\n        if (newY >= ROWS || newX < 0 || newX >= COLS || grid[newY] && grid[newY][newX]) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n};\nconst mergeTetromino = (grid, tetromino) => {\n  const newGrid = grid.map(row => [...row]);\n  const {\n    shape,\n    x,\n    y\n  } = tetromino;\n  shape.forEach((row, dy) => {\n    row.forEach((val, dx) => {\n      if (val && y + dy < ROWS && x + dx >= 0) {\n        newGrid[y + dy][x + dx] = tetromino.color;\n      }\n    });\n  });\n  return newGrid;\n};\nconst clearLines = grid => {\n  const newGrid = grid.filter(row => row.some(cell => cell === 0));\n  const linesCleared = ROWS - newGrid.length;\n  while (newGrid.length < ROWS) newGrid.unshift(Array(COLS).fill(0));\n  return {\n    grid: newGrid,\n    linesCleared\n  };\n};\nconst TetrisGame = ({\n  isDark\n}) => {\n  _s();\n  const [mode, setMode] = useState(HARD_MODE);\n  const COLS = mode.COLS;\n  const ROWS = mode.ROWS;\n  const canvasRef = useRef(null);\n  const [grid, setGrid] = useState(Array.from({\n    length: ROWS\n  }, () => Array(COLS).fill(0)));\n  const gridRef = useRef(grid);\n  const [activeBlock, setActiveBlock] = useState(randomTetromino());\n  const activeBlockRef = useRef(activeBlock);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n  const dropCounterRef = useRef(0);\n  const lastTimeRef = useRef(0);\n  const requestRef = useRef();\n  useEffect(() => {\n    activeBlockRef.current = activeBlock;\n  }, [activeBlock]);\n  useEffect(() => {\n    gridRef.current = grid;\n  }, [grid]);\n  const draw = ctx => {\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n    for (let y = 0; y < ROWS; y++) {\n      for (let x = 0; x < COLS; x++) {\n        if (gridRef.current[y][x]) {\n          ctx.fillStyle = gridRef.current[y][x];\n          ctx.fillRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);\n          ctx.strokeStyle = \"#1e3a8a\";\n          ctx.strokeRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);\n        }\n      }\n    }\n    const {\n      shape,\n      x,\n      y,\n      color\n    } = activeBlockRef.current;\n    shape.forEach((row, dy) => {\n      row.forEach((val, dx) => {\n        if (val) {\n          ctx.fillStyle = color;\n          ctx.fillRect((x + dx) * BLOCK_SIZE, (y + dy) * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);\n          ctx.strokeStyle = \"#1e3a8a\";\n          ctx.strokeRect((x + dx) * BLOCK_SIZE, (y + dy) * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);\n        }\n      });\n    });\n  };\n  const gameLoop = time => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const deltaTime = time - lastTimeRef.current;\n    lastTimeRef.current = time;\n    dropCounterRef.current += deltaTime;\n    const dropInterval = mode.DROP_INTERVAL;\n    if (isRunning && !isPaused && dropCounterRef.current > dropInterval) {\n      dropCounterRef.current = 0;\n      const moved = {\n        ...activeBlockRef.current,\n        y: activeBlockRef.current.y + 1\n      };\n      if (isValidMove(moved.shape, gridRef.current, moved.x, moved.y)) {\n        setActiveBlock(moved);\n      } else {\n        const merged = mergeTetromino(gridRef.current, activeBlockRef.current);\n        const {\n          grid: cleared,\n          linesCleared\n        } = clearLines(merged);\n        if (linesCleared > 0) {\n          const points = [0, 100, 300, 500, 800][linesCleared] || 0;\n          setScore(prev => prev + points);\n        }\n        setGrid(cleared);\n        const nextBlock = randomTetromino();\n        // Check for game over: if the next block collides immediately\n        if (!isValidMove(nextBlock.shape, gridRef.current, nextBlock.x, nextBlock.y)) {\n          setIsRunning(false);\n          setIsGameOver(true);\n          return;\n        }\n        setActiveBlock(nextBlock);\n        activeBlockRef.current = nextBlock;\n      }\n    }\n    draw(ctx);\n    requestRef.current = requestAnimationFrame(gameLoop);\n  };\n  useEffect(() => {\n    if (isRunning) {\n      lastTimeRef.current = performance.now();\n      requestRef.current = requestAnimationFrame(gameLoop);\n    }\n    return () => cancelAnimationFrame(requestRef.current);\n  }, [isRunning, isPaused]);\n  useEffect(() => {\n    if (isRunning && !isPaused) {\n      const ctx = canvasRef.current.getContext(\"2d\");\n      draw(ctx);\n    }\n  }, [grid, activeBlock]);\n  useEffect(() => {\n    const handleKey = e => {\n      if (!isRunning || isPaused) return;\n      let moved = {\n        ...activeBlockRef.current\n      };\n      if (e.key === \"ArrowLeft\" || e.key.toLowerCase() === \"a\") moved.x--;else if (e.key === \"ArrowRight\" || e.key.toLowerCase() === \"d\") moved.x++;else if (e.key === \"ArrowDown\" || e.key.toLowerCase() === \"s\") moved.y++;else if (e.key === \"ArrowUp\" || e.key.toLowerCase() === \"w\") {\n        const rotated = rotateMatrix(activeBlockRef.current.shape);\n        if (isValidMove(rotated, gridRef.current, activeBlockRef.current.x, activeBlockRef.current.y)) {\n          setActiveBlock({\n            ...activeBlockRef.current,\n            shape: rotated\n          });\n          return;\n        }\n      }\n      if (isValidMove(moved.shape, gridRef.current, moved.x, moved.y)) setActiveBlock(moved);\n    };\n    window.addEventListener(\"keydown\", handleKey);\n    return () => window.removeEventListener(\"keydown\", handleKey);\n  }, [isRunning, isPaused, grid]);\n  const handleStart = () => {\n    setGrid(Array.from({\n      length: ROWS\n    }, () => Array(COLS).fill(0)));\n    setScore(0);\n    setHighScore(prev => Math.max(prev, score));\n    setIsGameOver(false);\n    const newBlock = randomTetromino();\n    setActiveBlock(newBlock);\n    activeBlockRef.current = newBlock;\n    setIsRunning(true);\n    setIsPaused(false);\n\n    // Delay drawing slightly until canvas is mounted\n    setTimeout(() => {\n      if (canvasRef.current) {\n        const ctx = canvasRef.current.getContext(\"2d\");\n        draw(ctx);\n      }\n    }, 0);\n  };\n  const handlePause = () => {\n    if (isRunning) setIsPaused(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center w-full px-4 pb-10 gap-y-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex gap-4 flex-wrap justify-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setMode(EASY_MODE),\n        disabled: isRunning,\n        className: \"px-2 py-1 rounded-md border text-white bg-green-500\",\n        children: \"Easy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setMode(HARD_MODE),\n        disabled: isRunning,\n        className: \"px-2 py-1 rounded-md border text-white bg-red-500\",\n        children: \"Hard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStart,\n        className: `px-2 py-1 rounded-md border text-white ${isRunning ? \"bg-slate-600\" : \"bg-green-600\"}`,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePause,\n        disabled: !isRunning,\n        className: `px-2 py-1 rounded-md border text-white ${isPaused ? \"bg-yellow-600\" : isDark ? \"bg-blue-600\" : \"bg-slate-600\"}`,\n        children: isPaused ? \"Resume\" : \"Pause\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: canvasWidth,\n      height: canvasHeight,\n      className: \"border border-slate-700 bg-black\",\n      style: {\n        imageRendering: \"pixelated\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-white font-semibold text-lg\",\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-white font-medium\",\n      children: [\"High Score: \", highScore]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this), isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 p-4 text-center text-red-500 font-bold bg-white bg-opacity-10 rounded\",\n      children: \"Game Over\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 5\n  }, this);\n};\n_s(TetrisGame, \"VAf5rkwgGuHsEfGYwmjv6vzOm5M=\");\n_c = TetrisGame;\nexport default TetrisGame;\nvar _c;\n$RefreshReg$(_c, \"TetrisGame\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","DEFAULT_MODE","COLS","ROWS","DROP_INTERVAL","EASY_MODE","HARD_MODE","BLOCK_SIZE","canvasWidth","mode","canvasHeight","TETROMINOES","I","shape","color","J","L","O","S","T","Z","randomTetromino","keys","Object","rand","Math","floor","random","length","x","y","rotateMatrix","matrix","map","_","i","row","reverse","isValidMove","grid","offsetX","offsetY","newY","newX","mergeTetromino","tetromino","newGrid","forEach","dy","val","dx","clearLines","filter","some","cell","linesCleared","unshift","Array","fill","TetrisGame","isDark","_s","setMode","canvasRef","setGrid","from","gridRef","activeBlock","setActiveBlock","activeBlockRef","isRunning","setIsRunning","isPaused","setIsPaused","isGameOver","setIsGameOver","score","setScore","highScore","setHighScore","dropCounterRef","lastTimeRef","requestRef","current","draw","ctx","clearRect","fillStyle","fillRect","strokeStyle","strokeRect","gameLoop","time","canvas","getContext","deltaTime","dropInterval","moved","merged","cleared","points","prev","nextBlock","requestAnimationFrame","performance","now","cancelAnimationFrame","handleKey","e","key","toLowerCase","rotated","window","addEventListener","removeEventListener","handleStart","max","newBlock","setTimeout","handlePause","className","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","ref","width","height","style","imageRendering","_c","$RefreshReg$"],"sources":["C:/Users/shawj/Desktop/ALL/portfolio/src/components/TetrisGame.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\n\r\nconst DEFAULT_MODE = { COLS: 10, ROWS: 20, DROP_INTERVAL: 500 };\r\nconst EASY_MODE = { COLS: 14, ROWS: 20, DROP_INTERVAL: 800 };\r\nconst HARD_MODE = DEFAULT_MODE;\r\nconst BLOCK_SIZE = 30;\r\nconst canvasWidth = mode.COLS * BLOCK_SIZE;\r\nconst canvasHeight = mode.ROWS * BLOCK_SIZE;\r\n\r\nconst TETROMINOES = {\r\n  I: { shape: [[0,0,0,0],[1,1,1,1],[0,0,0,0],[0,0,0,0]], color: \"#06b6d4\" },\r\n  J: { shape: [[1,0,0],[1,1,1],[0,0,0]], color: \"#3b82f6\" },\r\n  L: { shape: [[0,0,1],[1,1,1],[0,0,0]], color: \"#f97316\" },\r\n  O: { shape: [[1,1],[1,1]], color: \"#facc15\" },\r\n  S: { shape: [[0,1,1],[1,1,0],[0,0,0]], color: \"#22c55e\" },\r\n  T: { shape: [[0,1,0],[1,1,1],[0,0,0]], color: \"#a855f7\" },\r\n  Z: { shape: [[1,1,0],[0,1,1],[0,0,0]], color: \"#ef4444\" },\r\n};\r\n\r\nconst randomTetromino = () => {\r\n  const keys = Object.keys(TETROMINOES);\r\n  const rand = keys[Math.floor(Math.random() * keys.length)];\r\n  return { ...TETROMINOES[rand], x: 3, y: 0 };\r\n};\r\n\r\nconst rotateMatrix = (matrix) => matrix[0].map((_, i) => matrix.map(row => row[i]).reverse());\r\n\r\nconst isValidMove = (shape, grid, offsetX, offsetY) => {\r\n  for (let y = 0; y < shape.length; y++) {\r\n    for (let x = 0; x < shape[y].length; x++) {\r\n      if (shape[y][x]) {\r\n        const newY = y + offsetY;\r\n        const newX = x + offsetX;\r\n        if (\r\n          newY >= ROWS ||\r\n          newX < 0 ||\r\n          newX >= COLS ||\r\n          (grid[newY] && grid[newY][newX])\r\n        ) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\nconst mergeTetromino = (grid, tetromino) => {\r\n  const newGrid = grid.map(row => [...row]);\r\n  const { shape, x, y } = tetromino;\r\n  shape.forEach((row, dy) => {\r\n    row.forEach((val, dx) => {\r\n      if (val && y + dy < ROWS && x + dx >= 0) {\r\n        newGrid[y + dy][x + dx] = tetromino.color;\r\n      }\r\n    });\r\n  });\r\n  return newGrid;\r\n};\r\n\r\nconst clearLines = (grid) => {\r\n  const newGrid = grid.filter(row => row.some(cell => cell === 0));\r\n  const linesCleared = ROWS - newGrid.length;\r\n  while (newGrid.length < ROWS) newGrid.unshift(Array(COLS).fill(0));\r\n  return { grid: newGrid, linesCleared };\r\n};\r\n\r\nconst TetrisGame = ({ isDark }) => {\r\n  const [mode, setMode] = useState(HARD_MODE);\r\n  const COLS = mode.COLS;\r\n  const ROWS = mode.ROWS;\r\n  const canvasRef = useRef(null);\r\n  const [grid, setGrid] = useState(Array.from({ length: ROWS }, () => Array(COLS).fill(0)));\r\n  const gridRef = useRef(grid);\r\n  const [activeBlock, setActiveBlock] = useState(randomTetromino());\r\n  const activeBlockRef = useRef(activeBlock);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [highScore, setHighScore] = useState(0);\r\n\r\n  const dropCounterRef = useRef(0);\r\n  const lastTimeRef = useRef(0);\r\n  const requestRef = useRef();\r\n\r\n  useEffect(() => {\r\n    activeBlockRef.current = activeBlock;\r\n  }, [activeBlock]);\r\n\r\n  useEffect(() => {\r\n    gridRef.current = grid;\r\n  }, [grid]);\r\n\r\n  const draw = (ctx) => {\r\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n    for (let y = 0; y < ROWS; y++) {\r\n      for (let x = 0; x < COLS; x++) {\r\n        if (gridRef.current[y][x]) {\r\n        ctx.fillStyle = gridRef.current[y][x];\r\n        ctx.fillRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);\r\n          ctx.strokeStyle = \"#1e3a8a\";\r\n          ctx.strokeRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);\r\n        }\r\n      }\r\n    }\r\n    const { shape, x, y, color } = activeBlockRef.current;\r\n    shape.forEach((row, dy) => {\r\n      row.forEach((val, dx) => {\r\n        if (val) {\r\n          ctx.fillStyle = color;\r\n          ctx.fillRect((x + dx) * BLOCK_SIZE, (y + dy) * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);\r\n          ctx.strokeStyle = \"#1e3a8a\";\r\n          ctx.strokeRect((x + dx) * BLOCK_SIZE, (y + dy) * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  const gameLoop = (time) => {\r\n    if (!canvasRef.current) return;\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    const deltaTime = time - lastTimeRef.current;\r\n    lastTimeRef.current = time;\r\n    dropCounterRef.current += deltaTime;\r\n\r\n    const dropInterval = mode.DROP_INTERVAL;\r\n\r\n    if (isRunning && !isPaused && dropCounterRef.current > dropInterval) {\r\n      dropCounterRef.current = 0;\r\n      const moved = { ...activeBlockRef.current, y: activeBlockRef.current.y + 1 };\r\n      if (isValidMove(moved.shape, gridRef.current, moved.x, moved.y)) {\r\n        setActiveBlock(moved);\r\n      } else {\r\n        const merged = mergeTetromino(gridRef.current, activeBlockRef.current);\r\n        const { grid: cleared, linesCleared } = clearLines(merged);\r\n        if (linesCleared > 0) {\r\n          const points = [0, 100, 300, 500, 800][linesCleared] || 0;\r\n          setScore(prev => prev + points);\r\n        }\r\n        setGrid(cleared);\r\n        const nextBlock = randomTetromino();\r\n        // Check for game over: if the next block collides immediately\r\n        if (!isValidMove(nextBlock.shape, gridRef.current, nextBlock.x, nextBlock.y)) {\r\n          setIsRunning(false);\r\n          setIsGameOver(true);\r\n          return;\r\n        }\r\n        setActiveBlock(nextBlock);\r\n        activeBlockRef.current = nextBlock;\r\n      }\r\n    }\r\n\r\n    draw(ctx);\r\n    requestRef.current = requestAnimationFrame(gameLoop);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      lastTimeRef.current = performance.now();\r\n      requestRef.current = requestAnimationFrame(gameLoop);\r\n    }\r\n    return () => cancelAnimationFrame(requestRef.current);\r\n  }, [isRunning, isPaused]);\r\n\r\n  useEffect(() => {\r\n    if (isRunning && !isPaused) {\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n      draw(ctx);\r\n    }\r\n  }, [grid, activeBlock]);\r\n\r\n  useEffect(() => {\r\n    const handleKey = (e) => {\r\n      if (!isRunning || isPaused) return;\r\n      let moved = { ...activeBlockRef.current };\r\n      if (e.key === \"ArrowLeft\" || e.key.toLowerCase() === \"a\") moved.x--;\r\n      else if (e.key === \"ArrowRight\" || e.key.toLowerCase() === \"d\") moved.x++;\r\n      else if (e.key === \"ArrowDown\" || e.key.toLowerCase() === \"s\") moved.y++;\r\n      else if (e.key === \"ArrowUp\" || e.key.toLowerCase() === \"w\") {\r\n        const rotated = rotateMatrix(activeBlockRef.current.shape);\r\n        if (isValidMove(rotated, gridRef.current, activeBlockRef.current.x, activeBlockRef.current.y)) {\r\n          setActiveBlock({ ...activeBlockRef.current, shape: rotated });\r\n          return;\r\n        }\r\n      }\r\n      if (isValidMove(moved.shape, gridRef.current, moved.x, moved.y)) setActiveBlock(moved);\r\n    };\r\n\r\n    window.addEventListener(\"keydown\", handleKey);\r\n    return () => window.removeEventListener(\"keydown\", handleKey);\r\n  }, [isRunning, isPaused, grid]);\r\n\r\n  const handleStart = () => {\r\n    setGrid(Array.from({ length: ROWS }, () => Array(COLS).fill(0)));\r\n    setScore(0);\r\n    setHighScore(prev => Math.max(prev, score));\r\n    setIsGameOver(false);\r\n    const newBlock = randomTetromino();\r\n    setActiveBlock(newBlock);\r\n    activeBlockRef.current = newBlock;\r\n    setIsRunning(true);\r\n    setIsPaused(false);\r\n\r\n    // Delay drawing slightly until canvas is mounted\r\n    setTimeout(() => {\r\n      if (canvasRef.current) {\r\n        const ctx = canvasRef.current.getContext(\"2d\");\r\n        draw(ctx);\r\n      }\r\n    }, 0);\r\n  };\r\n\r\n  const handlePause = () => {\r\n    if (isRunning) setIsPaused((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center w-full px-4 pb-10 gap-y-4\">\r\n      <div className=\"flex gap-4 flex-wrap justify-center\">\r\n        <button\r\n          onClick={() => setMode(EASY_MODE)}\r\n          disabled={isRunning}\r\n          className=\"px-2 py-1 rounded-md border text-white bg-green-500\"\r\n        >\r\n          Easy\r\n        </button>\r\n        <button\r\n          onClick={() => setMode(HARD_MODE)}\r\n          disabled={isRunning}\r\n          className=\"px-2 py-1 rounded-md border text-white bg-red-500\"\r\n        >\r\n          Hard\r\n        </button>\r\n        <button\r\n          onClick={handleStart}\r\n          className={`px-2 py-1 rounded-md border text-white ${isRunning ? \"bg-slate-600\" : \"bg-green-600\"}`}\r\n        >\r\n          Start\r\n        </button>\r\n        <button\r\n          onClick={handlePause}\r\n          disabled={!isRunning}\r\n          className={`px-2 py-1 rounded-md border text-white ${isPaused ? \"bg-yellow-600\" : isDark ? \"bg-blue-600\" : \"bg-slate-600\"}`}\r\n        >\r\n          {isPaused ? \"Resume\" : \"Pause\"}\r\n        </button>\r\n      </div>\r\n\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={canvasWidth}\r\n        height={canvasHeight}\r\n        className=\"border border-slate-700 bg-black\"\r\n        style={{ imageRendering: \"pixelated\" }}\r\n      />\r\n\r\n      <div className=\"text-white font-semibold text-lg\">Score: {score}</div>\r\n      <div className=\"text-white font-medium\">High Score: {highScore}</div>\r\n\r\n      {isGameOver && (\r\n        <div className=\"mt-4 p-4 text-center text-red-500 font-bold bg-white bg-opacity-10 rounded\">\r\n          Game Over\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TetrisGame;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}